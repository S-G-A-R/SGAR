@model SGAR.AppWebMVC.Models.Ciudadano

@{
    ViewData["Title"] = "Edit";
}


<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="row mb-3">
                <div class="form-group col-4">
                    <label asp-for="Nombre" class="control-label required"></label>
                    <input asp-for="Nombre" class="form-control" autocomplete="off" />
                    <span asp-validation-for="Nombre" class="text-danger"></span>
                </div>
                <div class="form-group col-4">
                    <label asp-for="Apellido" class="control-label"></label>
                    <input asp-for="Apellido" class="form-control" autocomplete="off" />
                    <span asp-validation-for="Apellido" class="text-danger"></span>
                </div>

                <div class="form-group col-4">
                    <label asp-for="Correo" class="control-label required"></label>
                    <input asp-for="Correo" class="form-control" autocomplete="off" />
                    <span asp-validation-for="Correo" class="text-danger"></span>
                </div>
            </div>
            <div class="row mb-3">
                <div class="form-group col-3">
                    <label class="control-label required">Departamento</label>
                    <select id="departamentoId" class="form-control combo" asp-items="ViewBag.DepartamentoId"></select>
                </div>


                <div class="form-group col-3">
                    <label class="control-label required">Municipio</label>
                    <select id="municipioId" class="form-control combo" asp-items="ViewBag.MunicipioId"></select>
                </div>


                <div class="form-group col-3">
                    <label class="control-label required">Distrito</label>
                    <select id="distritos" class="form-control combo" asp-items="ViewBag.DistritoId"></select>
                </div>

                <div class="form-group col-3">
                    <label asp-for="ZonaId" class="control-label required"></label>
                    <select id="zonas" asp-for="ZonaId" class="form-control combo" asp-items="ViewBag.ZonaId"></select>
                </div>
            </div>

            <div class="d-flex justify-content-center">

                <div class="form-group w-25 d-flex justify-content-center">
                    <input type="submit" value="Guardar" class="btn btn-success w-50" />
                </div>
                <div class="w-25 d-flex justify-content-center">
                    <a asp-action="Perfil" asp-route-id="@Model?.Id" class="btn btn-info w-50 "><i class="bi bi-arrow-90deg-left"></i> Volver</a>
                </div>

            </div>

        </form>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
<script>

    // 1. $("#departamentoId").change(function () { ... });
//    Selecciona el elemento del DOM con el ID 'departamentoId' (se espera que sea un elemento
//    de selección <select>) utilizando jQuery. Luego, se adjunta un "manejador de eventos"
//    (event handler) para el evento 'change'. Este evento se dispara cuando el valor del
//    elemento de selección cambia. La función anónima proporcionada como argumento se ejecutará
//    cuando el usuario seleccione una opción diferente en el desplegable de departamentos.
$("#departamentoId").change(function () {
    // 2. getMunicipiosFromDepartamentoId();
    //    Dentro del manejador del evento 'change' para el departamento, se llama a la función
    //    'getMunicipiosFromDepartamentoId'. Se espera que esta función realice una llamada AJAX
    //    al servidor para obtener la lista de municipios correspondientes al departamento
    //    seleccionado.
    getMunicipiosFromDepartamentoId();
})

// 3. $("#municipioId").change(function () { ... });
//    Similar al paso 1, pero para el elemento con el ID 'municipioId' (otro <select>). Se adjunta
//    un manejador para el evento 'change'.
$("#municipioId").change(function () {
    // 4. getDistritosFromMunicipioId();
    //    Cuando cambia la selección en el desplegable de municipios, se llama a la función
    //    'getDistritosFromMunicipioId'. Se espera que esta función realice una llamada AJAX
    //    al servidor para obtener la lista de distritos correspondientes al municipio
    //    seleccionado.
    getDistritosFromMunicipioId();
})

// 5. $("#distritos").change(function () { ... });
//    Similar a los pasos 1 y 3, pero para el elemento con el ID 'distritos' (otro <select>).
//    Se adjunta un manejador para el evento 'change'.
$("#distritos").change(function () {
    // 6. getZonasFromDistritoId();
    //    Cuando cambia la selección en el desplegable de distritos, se llama a la función
    //    'getZonasFromDistritoId'. Se espera que esta función realice una llamada AJAX
    //    al servidor para obtener la lista de zonas correspondientes al distrito
    //    seleccionado.
    getZonasFromDistritoId();
})

// 7. var getMunicipiosFromDepartamentoId = function () { ... };
//    Declara una variable llamada 'getMunicipiosFromDepartamentoId' y le asigna una función.
//    Esta función se encarga de realizar la llamada AJAX para obtener los municipios.
var getMunicipiosFromDepartamentoId = function () {
    // 8. $.ajax({ ... });
    //    Utiliza la función 'ajax' de la librería jQuery (indicado por '$') para realizar una
    //    petición HTTP asíncrona.
    $.ajax({
        // 9. url: '@Url.Action("GetMunicipiosFromDepartamentoId", "Ciudadano")',
        //    Especifica la URL a la que se enviará la petición AJAX. Se utiliza la sintaxis de
        //    ASP.NET MVC ('Url.Action') para generar la URL de la acción del controlador llamada
        //    "GetMunicipiosFromDepartamentoId" dentro del controlador llamado "Ciudadano". Esto
        //    asegura que la URL sea correcta incluso si la estructura de las rutas de la aplicación cambia.
        url: '@Url.Action("GetMunicipiosFromDepartamentoId", "Ciudadano")',
        // 10. type: 'GET',
        //     Especifica el tipo de petición HTTP que se realizará, en este caso, una petición GET.
        //     Las peticiones GET se utilizan comúnmente para solicitar datos al servidor.
        type: 'GET',
        // 11. data: { departamentoId: $('#departamentoId').val(), },
        //     Especifica los datos que se enviarán al servidor con la petición GET. Se envían como
        //     un objeto JavaScript que jQuery convertirá en parámetros en la URL (query string).
        //     - departamentoId: $('#departamentoId').val(): Obtiene el valor seleccionado en el
        //       elemento con el ID 'departamentoId' (el desplegable de departamentos) utilizando
        //       jQuery y lo envía al servidor bajo el nombre del parámetro 'departamentoId'.
        data: {
            departamentoId: $('#departamentoId').val(),
        },
        // 12. success: function (data) { ... },
        //     Define una función que se ejecutará si la petición AJAX al servidor se completa
        //     con éxito (es decir, el servidor devuelve una respuesta con un código de estado HTTP
        //     que indica éxito, como 200 OK). El parámetro 'data' contendrá la respuesta del servidor,
        //     que se espera que sea una lista de municipios.
        success: function (data) {
            // 13. $('#municipioId').find('option').remove();
            //     Selecciona el elemento con el ID 'municipioId' (el desplegable de municipios)
            //     utilizando jQuery, encuentra todos los elementos <option> dentro de él y los
            //     elimina. Esto se hace para limpiar la lista de municipios antes de agregar los
            //     nuevos correspondientes al departamento seleccionado.
            $('#municipioId').find('option').remove()
            // 14. $('#municipioId').append('<option value="0">SELECCIONAR</option>');
            //     Agrega una nueva opción al desplegable de municipios. Esta opción tiene el valor
            //     "0" y el texto "SELECCIONAR", que generalmente se utiliza como una opción por
            //     defecto o un marcador de posición para indicar que el usuario debe seleccionar
            //     un municipio.
            $('#municipioId').append('<option value="0">SELECCIONAR</option>')
            // 15. $('#distritos').find('option').remove();
            //     Similar al paso 13, pero para el desplegable de distritos ('#distritos'). Se
            //     limpian las opciones existentes ya que la selección de un nuevo departamento
            //     hace que los distritos previamente mostrados ya no sean relevantes.
            $('#distritos').find('option').remove()
            // 16. $('#distritos').append('<option value="0">SELECCIONAR</option>');
            //     Agrega la opción por defecto "SELECCIONAR" al desplegable de distritos.
            $('#distritos').append('<option value="0">SELECCIONAR</option>')
            // 17. $('#zonas').find('option').remove();
            //     Similar a los pasos 13 y 15, pero para el desplegable de zonas ('#zonas'). Se
            //     limpian las opciones existentes.
            $('#zonas').find('option').remove()
            // 18. $('#zonas').append('<option value="0">SELECCIONAR</option>');
            //     Agrega la opción por defecto "SELECCIONAR" al desplegable de zonas.
            $('#zonas').append('<option value="0">SELECCIONAR</option>')
            // 19. $(data).each(function (i, item) { ... });
            //     Itera sobre la lista de municipios recibida del servidor en la variable 'data'
            //     utilizando la función 'each' de jQuery. Para cada elemento de la lista:
            //     - 'i' es el índice del elemento en la lista.
            //     - 'item' es el objeto que representa un municipio. Se espera que cada municipio
            //       tenga propiedades como 'id' y 'nombre'.
            $(data).each(
                function (i, item) {
                    // 20. $('#municipioId').append('<option value="' + item.id + '">' + item.nombre + '</option>');
                    //     Para cada municipio en la lista 'data', se crea un nuevo elemento <option>
                    //     para el desplegable de municipios ('#municipioId'). El valor de la opción
                    //     se establece al 'id' del municipio y el texto visible de la opción se
                    //     establece al 'nombre' del municipio. Esta nueva opción se agrega al final
                    //     del desplegable de municipios.
                    $('#municipioId').append('<option value="' + item.id + '">' + item.nombre + '</option>')
                }
            )
        }
    })
}

// 21. var getDistritosFromMunicipioId = function () { ... };
//     Declara una variable llamada 'getDistritosFromMunicipioId' y le asigna una función.
//     Esta función se encarga de realizar la llamada AJAX para obtener los distritos.
var getDistritosFromMunicipioId = function () {
    // 22. $.ajax({ ... });
    //     Realiza una petición HTTP asíncrona utilizando jQuery AJAX.
    $.ajax({
        // 23. url: '@Url.Action("GetDistritosFromMunicipioId", "Ciudadano")',
        //     Especifica la URL para obtener los distritos basada en el municipio seleccionado.
        url: '@Url.Action("GetDistritosFromMunicipioId", "Ciudadano")',
        // 24. type: 'GET',
        //     Utiliza el método GET para solicitar los datos.
        type: 'GET',
        // 25. data: { municipioId: $('#municipioId').val(), },
        //     Envía el ID del municipio seleccionado como parámetro en la petición.
        data: {
            municipioId: $('#municipioId').val(),
        },
        // 26. success: function (data) { ... },
        //     Función que se ejecuta si la petición es exitosa. 'data' contiene la lista de distritos.
        success: function (data) {
            // 27. $('#distritos').find('option').remove();
            //     Limpia las opciones existentes en el desplegable de distritos.
            $('#distritos').find('option').remove()
            // 28. $('#distritos').append('<option value="0">SELECCIONAR</option>');
            //     Agrega la opción por defecto "SELECCIONAR" al desplegable de distritos.
            $('#distritos').append('<option value="0">SELECCIONAR</option>')
            // 29. $('#zonas').find('option').remove();
            //     Limpia las opciones existentes en el desplegable de zonas (ya que un nuevo municipio
            //     puede tener diferentes distritos y, por lo tanto, diferentes zonas).
            $('#zonas').find('option').remove()
            // 30. $('#zonas').append('<option value="0">SELECCIONAR</option>');
            //     Agrega la opción por defecto "SELECCIONAR" al desplegable de zonas.
            $('#zonas').append('<option value="0">SELECCIONAR</option>')
            // 31. $(data).each(function (i, item) { ... });
            //     Itera sobre la lista de distritos recibida del servidor.
            $(data).each(
                function (i, item) {
                    // 32. $('#distritos').append('<option value="' + item.id + '">' + item.nombre + '</option>');
                    //     Agrega una nueva opción al desplegable de distritos para cada distrito en la lista.
                    $('#distritos').append('<option value="' + item.id + '">' + item.nombre + '</option>')
                }
            )
        }
    })
}

// 33. var getZonasFromDistritoId = function () { ... };
//     Declara una variable llamada 'getZonasFromDistritoId' y le asigna una función.
//     Esta función se encarga de realizar la llamada AJAX para obtener las zonas.
var getZonasFromDistritoId = function () {
    // 34. $.ajax({ ... });
    //     Realiza una petición HTTP asíncrona utilizando jQuery AJAX.
    $.ajax({
        // 35. url: '@Url.Action("GetZonasFromDistritoId", "Ciudadano")',
        //     Especifica la URL para obtener las zonas basada en el distrito seleccionado.
        url: '@Url.Action("GetZonasFromDistritoId", "Ciudadano")',
        // 36. type: 'GET',
        //     Utiliza el método GET para solicitar los datos.
        type: 'GET',
        // 37. data: { distritoId: $('#distritos').val(), },
        //     Envía el ID del distrito seleccionado como parámetro en la petición.
        data: {
            distritoId: $('#distritos').val(),
        },
        // 38. success: function (data) { ... },
        //     Función que se ejecuta si la petición es exitosa. 'data' contiene la lista de zonas.
        success: function (data) {
            // 39. $('#zonas').find('option').remove();
            //     Limpia las opciones existentes en el desplegable de zonas.
            $('#zonas').find('option').remove()
            // 40. $('#zonas').append('<option value="0">SELECCIONAR</option>');
            //     Agrega la opción por defecto "SELECCIONAR" al desplegable de zonas.
            $('#zonas').append('<option value="0">SELECCIONAR</option>')
            // 41. $(data).each(function (i, item) { ... });
            //     Itera sobre la lista de zonas recibida del servidor.
            $(data).each(
                function (i, item) {
                    // 42. $('#zonas').append('<option value="' + item.id + '">' + item.nombre + '</option>');
                    //     Agrega una nueva opción al desplegable de zonas para cada zona en la lista.
                    $('#zonas').append('<option value="' + item.id + '">' + item.nombre + '</option>')
                }
            )
        }
    })
}
</script>
}
