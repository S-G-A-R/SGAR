@model SGAR.AppWebMVC.Models.Ciudadano

@{
    ViewData["Title"] = "Create";
}

<style>
    .custom-card {
        background-color: #f8f9fa; /* Gris muy claro para el fondo de la tarjeta */
        border: 1px solid #dee2e6; /* Borde sutil */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Sombra suave */
    }

    .form-label {
        font-weight: 500; /* Peso de fuente semi-negrita para etiquetas */
        color: #343a40; /* Color de texto más oscuro para etiquetas */
        position: absolute; /* Posiciona la etiqueta encima del borde */
        top: -10px; /* Ajusta la posición vertical */
        left: 10px; /* Ajusta la posición horizontal */
        background-color: #f8f9fa;
        
        padding: 0 5px; /* Espacio alrededor del texto */
        font-size: 14px; /* Tamaño de la fuente */
    }

    .form-control {
        border-radius: 8px; /* Bordes redondeados para campos de entrada */
        border: 1px solid #ced4da; /* Borde más claro */
        padding: 10px 15px; /* Espaciado interno mejorado */
        padding-top: 10px; /* Asegura que el texto no se superponga con la etiqueta */
    }

        .form-control:focus {
            border-color: #007bff; /* Color de borde al enfocar */
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); /* Sombra al enfocar */
        }

    .btn-success {
        background-color: #28a745; /* Verde éxito */
        border-color: #28a745;
        width: 80px; /* Nuevo ancho para el botón */
        padding: 5px 10px; /* Ajuste del padding */
        font-size: 12px; /* Ajuste del tamaño de la fuente */
    }

        .btn-success:hover {
            background-color: #218838; /* Verde más oscuro al pasar el ratón */
            border-color: #1e7e34;
        }

    .btn-outline-secondary {
        border-color: #6c757d; /* Borde gris secundario */
        color: #6c757d;
        width: 80px; /* Nuevo ancho para el botón */
        padding: 5px 10px; /* Ajuste del padding */
        font-size: 12px; /* Ajuste del tamaño de la fuente */
    }

        .btn-outline-secondary:hover {
            background-color: #e2e6ea; /* Fondo gris claro al pasar el ratón */
        }

    .rounded-circle {
        object-fit: cover; /* Asegura que la imagen se ajuste bien */
    }

    .form-control {
        border: 2px solid #e0e0e0 !important; /* Borde gris */
        border-radius: 10px !important; /* Bordes más redondeados */
        padding-left: 40px; /* Ajuste para dejar espacio suficiente para el icono */
    }

    /* Ajustes para reducir el espacio entre los botones */
    .form-group.w-25 {
        margin-right: 2px;
    }

    .w-25 {
        margin-left: 2px;
    }

    .d-flex.justify-content-center {
        gap: 5px;
    }

    .form-group {
        position: relative; /* Establece el contexto de posicionamiento para las etiquetas */
    }
</style>

<div class="row mb-4">
    <div class="col-md-10 mx-auto">
        <div class="card p-4 rounded-4 shadow-sm custom-card">
            <div class="d-flex justify-content-center mb-4">
                <img src="~/css/sgarlogo.jpeg" width="200" height="200" alt="Logo" class="rounded-circle">
            </div>

            <form asp-action="Create">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="row mb-3">
                    <div class="form-group col-md-3">
                        <label asp-for="Nombre" class="form-label required">Nombre</label>
                        <input asp-for="Nombre" class="form-control" autocomplete="off" />
                        <span asp-validation-for="Nombre" class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-3">
                        <label asp-for="Apellido" class="form-label">Apellido</label>
                        <input asp-for="Apellido" class="form-control" autocomplete="off" />
                        <span asp-validation-for="Apellido" class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-3">
                        <label asp-for="Dui" class="form-label required">DUI</label>
                        <input asp-for="Dui" class="form-control" autocomplete="off" />
                        <span asp-validation-for="Dui" class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-3">
                        <label asp-for="Correo" class="form-label required">Correo</label>
                        <input asp-for="Correo" class="form-control" autocomplete="off" />
                        <span asp-validation-for="Correo" class="text-danger"></span>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="form-group col-md-3">
                        <label class="form-label required">Departamento</label>
                        <select id="departamentoId" class="form-control combo" asp-items="ViewBag.DepartamentoId"></select>
                    </div>
                    <div class="form-group col-md-3">
                        <label class="form-label required">Municipio</label>
                        <select id="municipioId" class="form-control combo" asp-items="ViewBag.MunicipioId"></select>
                    </div>
                    <div class="form-group col-md-3">
                        <label class="form-label required">Distrito</label>
                        <select id="distritos" class="form-control combo" asp-items="ViewBag.DistritoId"></select>
                    </div>
                    <div class="form-group col-md-3">
                        <label asp-for="ZonaId" class="form-label required">Zona</label>
                        <select id="zonas" asp-for="ZonaId" class="form-control combo" asp-items="ViewBag.ZonaId"></select>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="form-group col-md-4">
                        <label asp-for="Password" class="form-label required">Contraseña</label>
                        <input asp-for="Password" class="form-control" type="password" />
                        <span asp-validation-for="Password" class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-4">
                        <label asp-for="ConfirmarPassword" class="form-label">Confirmar Contraseña</label>
                        <input asp-for="ConfirmarPassword" class="form-control" type="password" />
                        <span asp-validation-for="ConfirmarPassword" class="text-danger"></span>
                    </div>
                </div>

                <div class="row m-2" id="divUbicacion">
                    <partial name="_SelectUbication" model="@Model.Notificacion" />
                </div>

                <div class="d-flex justify-content-center">
                    <div class="form-group  d-flex justify-content-center me-2">
                        <input type="submit" value="Crear" class="btn btn-success " />
                    </div>
                    <div class=" d-flex justify-content-center">
                        <a asp-action="Login" class="btn btn-outline-secondary "><i class="bi bi-arrow-90deg-left"></i> Volver</a>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
<script>
    // 1. function setUbicationProps() { ... }
//    Declara una función JavaScript llamada 'setUbicationProps'. Se espera que esta función
//    realice una llamada AJAX para guardar o actualizar la información de ubicación del ciudadano.
function setUbicationProps() {
    // 2. $.ajax({ ... });
    //    Utiliza la función 'ajax' de la librería jQuery (indicado por '$') para realizar una
    //    petición HTTP asíncrona.
    $.ajax({
        // 3. url: '@Url.Action("SaveLocation", "Ciudadano")',
        //    Especifica la URL a la que se enviará la petición AJAX. Se utiliza la sintaxis de
        //    ASP.NET MVC ('Url.Action') para generar la URL de la acción del controlador llamada
        //    "SaveLocation" dentro del controlador llamado "Ciudadano". Esto asegura que la URL
        //    sea correcta incluso si la estructura de las rutas de la aplicación cambia.
        url: '@Url.Action("SaveLocation", "Ciudadano")',
        // 4. data: $("#divUbicacion").serialize(),
        //    Especifica los datos que se enviarán al servidor con la petición AJAX.
        //    - $("#divUbicacion"): Utiliza el selector de jQuery para obtener el elemento del
        //      DOM con el ID 'divUbicacion'. Se espera que este div contenga los campos del
        //      formulario relacionados con la ubicación del ciudadano (por ejemplo, los
        //      desplegables de departamento, municipio, distrito, zona, etc.).
        //    - ".serialize()": Convierte los valores de los campos dentro del 'divUbicacion' que
        //      tienen un atributo 'name' en una cadena de consulta (query string) codificada
        //      para ser enviada en la petición HTTP (por ejemplo,
        //      'departamentoId=1&municipioId=5&distritoId=10&zonaId=25').
        data: $("#divUbicacion").serialize(),
        // 5. success: function (html) { ... },
        //    Define una función que se ejecutará si la petición AJAX al servidor se completa
        //    con éxito (es decir, el servidor devuelve una respuesta con un código de estado HTTP
        //    que indica éxito, como 200 OK). El parámetro 'html' contendrá la respuesta del servidor,
        //    que se espera que sea código HTML.
        success: function (html) {
            // 6. $("#divUbicacion").html(html);
            //    Utiliza jQuery para seleccionar el elemento del DOM con el ID 'divUbicacion'
            //    y reemplaza su contenido HTML con el HTML recibido del servidor en la respuesta
            //    AJAX. Esto sugiere que la acción "SaveLocation" en el servidor procesa la
            //    solicitud y devuelve el HTML actualizado para la sección de ubicación, posiblemente
            //    mostrando un mensaje de éxito o actualizando la interfaz de usuario.
            $("#divUbicacion").html(html);
        }
    });
}

// 7. $("#departamentoId").change(function () { ... });
//    Selecciona el elemento del DOM con el ID 'departamentoId' (se espera que sea un elemento
//    de selección <select>) utilizando jQuery. Luego, se adjunta un "manejador de eventos"
//    (event handler) para el evento 'change'. Este evento se dispara cuando el valor del
//    elemento de selección cambia. La función anónima proporcionada como argumento se ejecutará
//    cuando el usuario seleccione una opción diferente en el desplegable de departamentos.
$("#departamentoId").change(function () {
    // 8. getMunicipiosFromDepartamentoId();
    //    Dentro del manejador del evento 'change' para el departamento, se llama a la función
    //    'getMunicipiosFromDepartamentoId' (definida más adelante). Se espera que esta función
    //    realice una llamada AJAX al servidor para obtener la lista de municipios correspondientes
    //    al departamento seleccionado y actualizar el desplegable de municipios.
    getMunicipiosFromDepartamentoId();
})

// 9. $("#municipioId").change(function () { ... });
//    Similar al paso 7, pero para el elemento con el ID 'municipioId' (otro <select>). Se adjunta
//    un manejador para el evento 'change'.
$("#municipioId").change(function () {
    // 10. getDistritosFromMunicipioId();
    //     Cuando cambia la selección en el desplegable de municipios, se llama a la función
    //     'getDistritosFromMunicipioId' (definida más adelante). Se espera que esta función
    //     realice una llamada AJAX al servidor para obtener la lista de distritos correspondientes
    //     al municipio seleccionado y actualizar el desplegable de distritos.
    getDistritosFromMunicipioId();
})

// 11. $("#distritos").change(function () { ... });
//     Similar a los pasos 7 y 9, pero para el elemento con el ID 'distritos' (otro <select>).
//     Se adjunta un manejador para el evento 'change'.
$("#distritos").change(function () {
    // 12. getZonasFromDistritoId();
    //     Cuando cambia la selección en el desplegable de distritos, se llama a la función
    //     'getZonasFromDistritoId' (definida más adelante). Se espera que esta función realice
    //     una llamada AJAX al servidor para obtener la lista de zonas correspondientes al distrito
    //     seleccionado y actualizar el desplegable de zonas.
    getZonasFromDistritoId();
})

// 13. var getMunicipiosFromDepartamentoId = function () { ... };
//     Declara una variable llamada 'getMunicipiosFromDepartamentoId' y le asigna una función.
//     Esta función se encarga de realizar la llamada AJAX para obtener los municipios basados en
//     el departamento seleccionado.
var getMunicipiosFromDepartamentoId = function () {
    // 14. $.ajax({ ... });
    //     Utiliza la función 'ajax' de jQuery para realizar una petición HTTP asíncrona.
    $.ajax({
        // 15. url: 'Url.Action("GetMunicipiosFromDepartamentoId", "Ciudadano")',
        //     Especifica la URL para obtener los municipios del departamento seleccionado.
        url: '@Url.Action("GetMunicipiosFromDepartamentoId", "Ciudadano")',
        // 16. type: 'GET',
        //     Utiliza el método GET para solicitar los datos.
        type: 'GET',
        // 17. data: { departamentoId: $('#departamentoId').val(), },
        //     Envía el ID del departamento seleccionado como parámetro en la petición.
        data: {
            departamentoId: $('#departamentoId').val(),
        },
        // 18. success: function (data) { ... },
        //     Función que se ejecuta si la petición es exitosa. 'data' contiene la lista de municipios.
        success: function (data) {
            // 19. $('#municipioId').find('option').remove();
            //     Limpia las opciones existentes en el desplegable de municipios.
            $('#municipioId').find('option').remove()
            // 20. $('#municipioId').append('<option value="0">SELECCIONAR</option>');
            //     Agrega la opción por defecto "SELECCIONAR" al desplegable de municipios.
            $('#municipioId').append('<option value="0">SELECCIONAR</option>')
            // 21. $('#distritos').find('option').remove();
            //     Limpia las opciones existentes en el desplegable de distritos.
            $('#distritos').find('option').remove()
            // 22. $('#distritos').append('<option value="0">SELECCIONAR</option>');
            //     Agrega la opción por defecto "SELECCIONAR" al desplegable de distritos.
            $('#distritos').append('<option value="0">SELECCIONAR</option>')
            // 23. $('#zonas').find('option').remove();
            //     Limpia las opciones existentes en el desplegable de zonas.
            $('#zonas').find('option').remove()
            // 24. $('#zonas').append('<option value="0">SELECCIONAR</option>');
            //     Agrega la opción por defecto "SELECCIONAR" al desplegable de zonas.
            $('#zonas').append('<option value="0">SELECCIONAR</option>')
            // 25. $(data).each(function (i, item) { ... });
            //     Itera sobre la lista de municipios recibida del servidor.
            $(data).each(
                function (i, item) {
                    // 26. $('#municipioId').append('<option value="' + item.id + '">' + item.nombre + '</option>');
                    //     Agrega una nueva opción al desplegable de municipios para cada municipio en la lista.
                    $('#municipioId').append('<option value="' + item.id + '">' + item.nombre + '</option>')
                }
            )
        }
    })
}


// 1. var getDistritosFromMunicipioId = function () { ... };
//    Declara una variable llamada 'getDistritosFromMunicipioId' y le asigna una función anónima.
//    Esta función se encarga de realizar una llamada AJAX para obtener la lista de distritos
//    correspondientes a un municipio seleccionado.
var getDistritosFromMunicipioId = function () {
    // 2. $.ajax({ ... });
    //    Utiliza la función 'ajax' de la librería jQuery (indicado por '$') para realizar una
    //    petición HTTP asíncrona.
    $.ajax({
        // 3. url: '@Url.Action("GetDistritosFromMunicipioId", "Ciudadano")',
        //    Especifica la URL a la que se enviará la petición AJAX. Se utiliza la sintaxis de
        //    ASP.NET MVC ('Url.Action') para generar la URL de la acción del controlador llamada
        //    "GetDistritosFromMunicipioId" dentro del controlador llamado "Ciudadano". Esto asegura
        //    que la URL sea correcta incluso si la estructura de las rutas de la aplicación cambia.
        url: '@Url.Action("GetDistritosFromMunicipioId", "Ciudadano")',
        // 4. type: 'GET',
        //     Especifica el tipo de petición HTTP que se realizará, en este caso, una petición GET.
        //     Las peticiones GET se utilizan comúnmente para solicitar datos al servidor.
        type: 'GET',
        // 5. data: { municipioId: $('#municipioId').val(), },
        //     Especifica los datos que se enviarán al servidor con la petición GET. Se envían como
        //     un objeto JavaScript que jQuery convertirá en parámetros en la URL (query string).
        //     - municipioId: $('#municipioId').val(): Obtiene el valor seleccionado en el elemento
        //       con el ID 'municipioId' (se espera que sea un desplegable <select> de municipios)
        //       utilizando jQuery y lo envía al servidor bajo el nombre del parámetro 'municipioId'.
        data: {
            municipioId: $('#municipioId').val(),
        },
        // 6. success: function (data) { ... },
        //     Define una función que se ejecutará si la petición AJAX al servidor se completa
        //     con éxito (es decir, el servidor devuelve una respuesta con un código de estado HTTP
        //     que indica éxito, como 200 OK). El parámetro 'data' contendrá la respuesta del servidor,
        //     que se espera que sea una lista de distritos.
        success: function (data) {
            // 7. $('#distritos').find('option').remove();
            //     Selecciona el elemento con el ID 'distritos' (se espera que sea un desplegable
            //     <select> de distritos) utilizando jQuery, encuentra todos los elementos <option>
            //     dentro de él y los elimina. Esto se hace para limpiar la lista de distritos antes
            //     de agregar los nuevos correspondientes al municipio seleccionado.
            $('#distritos').find('option').remove()
            // 8. $('#distritos').append('<option value="0">SELECCIONAR</option>');
            //     Agrega una nueva opción al desplegable de distritos. Esta opción tiene el valor
            //     "0" y el texto "SELECCIONAR", que generalmente se utiliza como una opción por
            //     defecto o un marcador de posición para indicar que el usuario debe seleccionar
            //     un distrito.
            $('#distritos').append('<option value="0">SELECCIONAR</option>')
            // 9. $('#zonas').find('option').remove();
            //     Similar al paso 7, pero para el desplegable de zonas ('#zonas'). Se limpian las
            //     opciones existentes ya que la selección de un nuevo municipio puede implicar
            //     diferentes distritos y, por lo tanto, diferentes zonas.
            $('#zonas').find('option').remove()
            // 10. $('#zonas').append('<option value="0">SELECCIONAR</option>');
            //     Agrega la opción por defecto "SELECCIONAR" al desplegable de zonas.
            $('#zonas').append('<option value="0">SELECCIONAR</option>')
            // 11. $(data).each(function (i, item) { ... });
            //     Itera sobre la lista de distritos recibida del servidor en la variable 'data'
            //     utilizando la función 'each' de jQuery. Para cada elemento de la lista:
            //     - 'i' es el índice del elemento en la lista.
            //     - 'item' es el objeto que representa un distrito. Se espera que cada distrito
            //       tenga propiedades como 'id' y 'nombre'.
            $(data).each(
                function (i, item) {
                    // 12. $('#distritos').append('<option value="' + item.id + '">' + item.nombre + '</option>');
                    //     Para cada distrito en la lista 'data', se crea un nuevo elemento <option>
                    //     para el desplegable de distritos ('#distritos'). El valor de la opción
                    //     se establece al 'id' del distrito y el texto visible de la opción se
                    //     establece al 'nombre' del distrito. Esta nueva opción se agrega al final
                    //     del desplegable de distritos.
                    $('#distritos').append('<option value="' + item.id + '">' + item.nombre + '</option>')
                }
            )
        }
    })
}

// 13. var getZonasFromDistritoId = function () { ... };
//     Declara una variable llamada 'getZonasFromDistritoId' y le asigna una función anónima.
//     Esta función se encarga de realizar una llamada AJAX para obtener la lista de zonas
//     correspondientes a un distrito seleccionado.
var getZonasFromDistritoId = function () {
    // 14. $.ajax({ ... });
    //     Utiliza la función 'ajax' de jQuery para realizar una petición HTTP asíncrona.
    $.ajax({
        // 15. url: '@Url.Action("GetZonasFromDistritoId", "Ciudadano")',
        //     Especifica la URL para obtener las zonas del distrito seleccionado.
        url: '@Url.Action("GetZonasFromDistritoId", "Ciudadano")',
        // 16. type: 'GET',
        //     Utiliza el método GET para solicitar los datos.
        type: 'GET',
        // 17. data: { distritoId: $('#distritos').val(), },
        //     Envía el ID del distrito seleccionado como parámetro en la petición.
        data: {
            distritoId: $('#distritos').val(),
        },
        // 18. success: function (data) { ... },
        //     Función que se ejecuta si la petición es exitosa. 'data' contiene la lista de zonas.
        success: function (data) {
            // 19. $('#zonas').find('option').remove();
            //     Limpia las opciones existentes en el desplegable de zonas.
            $('#zonas').find('option').remove()
            // 20. $('#zonas').append('<option value="0">SELECCIONAR</option>');
            //     Agrega la opción por defecto "SELECCIONAR" al desplegable de zonas.
            $('#zonas').append('<option value="0">SELECCIONAR</option>')
            // 21. $(data).each(function (i, item) { ... });
            //     Itera sobre la lista de zonas recibida del servidor.
            $(data).each(
                function (i, item) {
                    // 22. $('#zonas').append('<option value="' + item.id + '">' + item.nombre + '</option>');
                    //     Agrega una nueva opción al desplegable de zonas para cada zona en la lista.
                    $('#zonas').append('<option value="' + item.id + '">' + item.nombre + '</option>')
                }
            )
        }
    })
}
</script>

}
