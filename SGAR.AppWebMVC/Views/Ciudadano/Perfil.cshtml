@model SGAR.AppWebMVC.Models.Ciudadano

@{
    ViewData["Title"] = "Details";
}


<div class="container profile-container">
    <h1 class="text-center"><i class="bi bi-person-circle"></i> Mi Perfil</h1>

    <div class="profile-card">
        <div class="profile-details">
            <div class="profile-row">
                <div class="profile-label">Nombre:</div>
                <div class="profile-value">@Model.Nombre</div>
            </div>
            <div class="profile-row">
                <div class="profile-label">Apellido:</div>
                <div class="profile-value">@Model.Apellido</div>
            </div>
            <div class="profile-row">
                <div class="profile-label">DUI:</div>
                <div class="profile-value">@Model.Dui</div>
            </div>
            <div class="profile-row">
                <div class="profile-label">Correo Electrónico:</div>
                <div class="profile-value">@Model.Correo</div>
            </div>
            <div class="profile-row">
                <div class="profile-label">Zona:</div>
                <div class="profile-value">
                    @{
                        var zonas = ((SelectList)ViewBag.ZonaId);
                        var zona = zonas.FirstOrDefault(s => s.Value == Model.ZonaId.ToString());
                        @zona.Text
                        ;
                    }
                </div>
            </div>
        </div>
    </div>
    <br />

    <div class="text-center">
        <a asp-action="Edit" asp-route-id="@Model?.Id" class="btn btn-primary">Editar</a>
        <a asp-action="CerrarSesion" class="btn btn-secondary">Cerrar Sesión</a>
        <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#staticBackdrop">Eliminar Cuenta</button>
    </div>
</div>



<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Eliminar Cuenta</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="text-center">
                <img src="~/css/eliminarsgar.png" style="max-width: 150px;" />
            </div>
            <div class="modal-body">


                Tu cuenta será eliminada, este es un cambio <strong>irreversible!.</strong>
                Se perderán todos tus datos, luego serás redirigido a la página principal.

                ¿Estás segur@@ de querer continuar?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">No, gracias</button>
                <button onclick="deleteUser()"  class="btn btn-outline-danger">Si, entiendo y quiero continuar</button>
            </div>
        </div>
    </div>
</div>


<style>
    .profile-container {
        max-width: 600px;
        margin: 50px auto;
    }

    .profile-card {
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        padding: 30px;
        display: flex; /*Convierte la tarjeta en un contenedor flexible, lo que facilita la disposición de sus elementos internos.*/
        flex-direction: row; /*Establece la dirección principal de los elementos flexibles en una fila (horizontal).*/
        align-items: center;
    }

    .profile-details {
        flex-grow: 1; /*Permite que este elemento flexible se expanda para ocupar todo el espacio disponible en la fila, después de que los otros elementos flexibles hayan tomado su espacio.*/
    }

    .profile-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
    }

    .profile-label {
        font-weight: bold;
        color: #555;
        width: 40%; /*Establece el ancho de la etiqueta al 40% del espacio disponible en la fila.*/
    }

    .profile-value {
        color: #333;
        width: 60%; /*Establece el ancho del valor al 60% del espacio disponible en la fila. Esto, junto con el 40% de la etiqueta, asegura que la fila se llene completamente.*/
    }
</style>

<script>
    // 1. function deleteUser(){ ... }
//    Declara una función JavaScript llamada 'deleteUser'. Esta función se encarga de realizar
//    una llamada AJAX para eliminar un usuario.
function deleteUser(){
    // 2. $.ajax({ ... });
    //    Utiliza la función 'ajax' de la librería jQuery (indicado por '$') para realizar una
    //    petición HTTP asíncrona.
    $.ajax({
        // 3. url: '@Url.Action("Delete", "Ciudadano")',
        //    Especifica la URL a la que se enviará la petición AJAX. Se utiliza la sintaxis de
        //    ASP.NET MVC ('Url.Action') para generar la URL de la acción del controlador llamada
        //    "Delete" dentro del controlador llamado "Ciudadano". Esto asegura que la URL sea
        //    correcta incluso si la estructura de las rutas de la aplicación cambia.
        url: '@Url.Action("Delete", "Ciudadano")',
        // 4. type: 'POST',
        //     Especifica el tipo de petición HTTP que se realizará, en este caso, una petición POST.
        //     Las peticiones POST se utilizan comúnmente para enviar datos al servidor para realizar
        //     operaciones que modifican el estado del servidor, como la eliminación de un recurso.
        type: 'POST',
        // 5. data: { id: @Convert.ToInt32(User.FindFirst("Id").Value), },
        //     Especifica los datos que se enviarán al servidor con la petición POST. Se envían como
        //     un objeto JavaScript.
        //     - id: @Convert.ToInt32(User.FindFirst("Id").Value): Intenta obtener el ID del usuario
        //       actual. La sintaxis '@Convert.ToInt32(User.FindFirst("Id").Value)' sugiere que se
        //       está utilizando un motor de plantillas del lado del servidor (como Razor en ASP.NET)
        //       para acceder a la identidad del usuario autenticado, encontrar la reclamación (claim)
        //       con el tipo "Id", obtener su valor y luego convertirlo a un entero. Este ID se
        //       enviará al servidor como el parámetro 'id' en el cuerpo de la petición POST.
        data: {
            id: /* Valor del ID del usuario actual obtenido del servidor */ @Convert.ToInt32(User.FindFirst("Id").Value),
        },
        // 6. success: function (res) { ... },
        //     Define una función que se ejecutará si la petición AJAX al servidor se completa
        //     con éxito (es decir, el servidor devuelve una respuesta con un código de estado HTTP
        //     que indica éxito, como 200 OK). El parámetro 'res' contendrá la respuesta del servidor.
        success: function (res) {
            // 7. window.location = res.redirectToUrl
            //     Redirige la ventana del navegador a una nueva URL. Se espera que la respuesta del
            //     servidor ('res') contenga una propiedad llamada 'redirectToUrl' que especifica la
            //     URL a la que se debe redirigir después de la eliminación exitosa del usuario.
            window.location = res.redirectToUrl
        }
        // 8. // No se define una función para el caso de error (error: function (xhr, status, error) { ... }),
        //    lo que significa que si la petición AJAX falla, no se realizará ninguna acción específica
        //    en el lado del cliente (aparte de cualquier comportamiento predeterminado del navegador
        //    o de jQuery para las peticiones AJAX fallidas). Sería recomendable agregar un manejo de
        //    errores para informar al usuario si la eliminación falla.
    })
}






</script>