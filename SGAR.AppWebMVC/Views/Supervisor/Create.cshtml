@model SGAR.AppWebMVC.Models.Supervisor

@{
    ViewData["Title"] = "Crear Supervisor";
}

<hr />
<div class="floating-box" style="background-color: white; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; margin: 20px auto; max-width: 800px;">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h4>Crear Supervisor</h4>
        <i class="bi bi-plus-square" style="font-size: 1.5rem;"></i>
    </div>
    <div class="col-md-12">
        <form asp-action="Create" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div style="background-color: white; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; margin: 20px auto; max-width: 800px;">
                <div class="d-flex align-items-center mb-4">
                    <i class="bi bi-person-fill me-2"></i>
                    <h4 class="mb-0">Datos Personales</h4>
                </div>
                <div class="row">
                    <div class="form-group col-4">
                        <label asp-for="Nombre" class="control-label required"></label>
                        <input asp-for="Nombre" class="form-control" />
                        <span asp-validation-for="Nombre" class="text-danger"></span>
                    </div>
                    <div class="form-group col-4">
                        <label asp-for="Apellido" class="control-label required"></label>
                        <input asp-for="Apellido" class="form-control" />
                        <span asp-validation-for="Apellido" class="text-danger"></span>
                    </div>
                    <div class="form-group col-4">
                        <label asp-for="Telefono" class="control-label"></label>
                        <input asp-for="Telefono" class="form-control" />
                        <span asp-validation-for="Telefono" class="text-danger"></span>
                    </div>
                    <div class="row">
                        <div class="form-group col-6">
                            <label asp-for="CorreoPersonal" class="control-label"></label>
                            <input asp-for="CorreoPersonal" class="form-control" />
                            <span asp-validation-for="CorreoPersonal" class="text-danger"></span>
                        </div>
                        <div class="form-group col-6">
                            <label asp-for="Dui" class="control-label required"></label>
                            <input asp-for="Dui" class="form-control" />
                            <span asp-validation-for="Dui" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row m-2" id="divReferentesSu">
                <partial name="_ReferentesSupervisor" model="Model.ReferentesSupervisores" />
            </div>

            <div style="background-color: white; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; margin: 20px auto; max-width: 800px;">
                <div class="d-flex align-items-center mb-4">
                    <i class="bi bi-telephone-fill me-2"></i>
                    <h4 class="mb-0">Datos de Contacto</h4>
                </div>
                <div class="row">
                    <div class="form-group col-4">
                        <label asp-for="Codigo" class="control-label required"></label>
                        <input asp-for="Codigo" class="form-control" />
                        <span asp-validation-for="Codigo" class="text-danger"></span>
                    </div>
                    <div class="form-group col-4">
                        <label asp-for="TelefonoLaboral" class="control-label required"></label>
                        <input asp-for="TelefonoLaboral" class="form-control" />
                        <span asp-validation-for="TelefonoLaboral" class="text-danger"></span>
                    </div>
                    <div class="form-group col-4">
                        <label asp-for="CorreoLaboral" class="control-label required"></label>
                        <input asp-for="CorreoLaboral" class="form-control" />
                        <span asp-validation-for="CorreoLaboral" class="text-danger"></span>
                    </div>
                    <div class="row">
                        <div class="form-group col-4">
                            <label asp-for="Password" class="control-label required"></label>
                            <input asp-for="Password" class="form-control" />
                            <span asp-validation-for="Password" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-5">
                            <label asp-for="FotoFile" class="control-label">Foto</label>
                            <input asp-for="FotoFile" type="file" class="form-control" />
                            <span asp-validation-for="FotoFile" class="text-danger"></span>
                        </div>
                        <div class="col-5">
                            <div id="fotoPreview" style="display: none;">
                                <img id="fotoImagePreview" src="#" alt="Vista previa de la imagen" style="max-width: 200px; max-height: 200px;">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <style>
                .form-control:focus {
                    border-color: lightgreen;
                    box-shadow: 0 0 0 0.2rem rgba(144, 238, 144, 0.25);
                }

                
            </style>

            <div style="background-color: white; padding: 10px; text-align: center;">
                
                    <input type="submit" value="Crear" class="btn btn-success" />
                    <a asp-action="Index" class="btn btn-danger "><i></i> cancelar</a>
            </div>
        </form>
    </div>
</div>



<script>
    // 1. function setupPreview(fileInputId, previewId, imagePreviewId){ ... }
    //    Declara una función llamada 'setupPreview' que toma tres argumentos:
    //    - fileInputId: El ID del elemento input de tipo file.
    //    - previewId: El ID del elemento contenedor (generalmente un div) donde se mostrará la vista previa.
    //    - imagePreviewId: El ID del elemento img donde se renderizará la imagen de vista previa.
    function setupPreview(fileInputId, previewId, imagePreviewId) {
        // 2. document.getElementById(fileInputId).addEventListener('change', function (event) { ... });
        //    Selecciona el elemento del DOM con el ID proporcionado en 'fileInputId' (se espera que sea
        //    un input de tipo file) y le agrega un "escuchador de eventos" para el evento 'change'.
        //    Este evento se dispara cuando el valor del input file ha sido cambiado por el usuario
        //    (es decir, cuando se selecciona un archivo). La función anónima proporcionada como segundo
        //    argumento se ejecutará cuando ocurra este evento. El objeto 'event' contiene información
        //    sobre el evento, incluyendo el archivo seleccionado.
        document.getElementById(fileInputId).addEventListener('change', function (event) {
            // 3. const file = event.target.files[0];
            //    Obtiene el primer archivo seleccionado por el usuario desde la propiedad 'files' del
            //    elemento que disparó el evento ('event.target', que en este caso es el input file).
            //    'event.target.files' es una lista de archivos, incluso si el input no tiene el atributo
            //    'multiple', siempre será una lista (con un máximo de un elemento en ese caso).
            const file = event.target.files[0];
            // 4. const preview = document.getElementById(previewId);
            //    Selecciona el elemento del DOM que actuará como contenedor de la vista previa usando el
            //    ID proporcionado en 'previewId'.
            const preview = document.getElementById(previewId);
            // 5. const imagePreview = document.getElementById(imagePreviewId);
            //    Selecciona el elemento img del DOM donde se mostrará la imagen de vista previa usando el
            //    ID proporcionado en 'imagePreviewId'.
            const imagePreview = document.getElementById(imagePreviewId);

            // 6. if (file) { ... } else { ... }
            //    Verifica si se ha seleccionado un archivo (es decir, si 'file' no es null o undefined).
            if (file) {
                // 7. const fileReader = new FileReader();
                //    Crea una nueva instancia del objeto FileReader. FileReader permite a las aplicaciones
                //    web leer el contenido de los archivos (o buffers de datos brutos) almacenados en el
                //    cliente de forma asíncrona.
                const fileReader = new FileReader();

                // 8. fileReader.onload = function (e) { ... };
                //    Define una función que se ejecutará cuando la operación de lectura del FileReader se
                //    haya completado con éxito. El objeto 'e' (para evento) contiene el resultado de la lectura.
                fileReader.onload = function (e) {
                    // 9. imagePreview.src = e.target.result;
                    //    Asigna el resultado de la lectura del archivo (que es una URL de datos representando
                    //    la imagen) a la propiedad 'src' del elemento img de vista previa. Esto hace que la
                    //    imagen se muestre en el elemento img.
                    imagePreview.src = e.target.result;
                    // 10. preview.style.display = 'block';
                    //     Establece la propiedad 'display' del estilo del elemento contenedor de la vista
                    //     previa a 'block', haciéndolo visible si estaba oculto previamente.
                    preview.style.display = 'block';
                };

                // 11. fileReader.readAsDataURL(file);
                //     Inicia la lectura del contenido del archivo como una URL de datos (data URL). Una
                //     data URL es un esquema de URL que proporciona una forma de incluir un recurso pequeño
                //     en línea en documentos HTML y CSS. Para imágenes, la URL de datos contendrá la
                //     representación Base64 de la imagen. Cuando la lectura se complete, se disparará el
                //     evento 'onload' del FileReader.
                fileReader.readAsDataURL(file);
            } else {
                // 12. imagePreview.src = '#';
                //     Si no se ha seleccionado ningún archivo (o se ha removido la selección), se establece
                //     la propiedad 'src' del elemento img de vista previa a '#', lo que generalmente hace
                //     que no se muestre ninguna imagen.
                imagePreview.src = '#';
                // 13. preview.style.display = 'none';
                //     Si no se ha seleccionado ningún archivo, se establece la propiedad 'display' del
                //     estilo del elemento contenedor de la vista previa a 'none', ocultándolo.
                preview.style.display = 'none';
            }
        });
    }

    // 14. setupPreview('FotoFile', 'fotoPreview', 'fotoImagePreview');
    //     Llama a la función 'setupPreview' para configurar la vista previa del archivo seleccionado
    //     en el input con ID 'FotoFile'. La vista previa se mostrará en el elemento img con ID
    //     'fotoImagePreview' dentro del contenedor con ID 'fotoPreview'.
    setupPreview('FotoFile', 'fotoPreview', 'fotoImagePreview');


    // 1. function addReferenteSu() { ... }
//    Declara una función JavaScript llamada 'addReferenteSu'. Se espera que esta función realice
//    una llamada AJAX para agregar un nuevo "referente Su" (la funcionalidad específica no está
//    clara sin más contexto, pero podría referirse a un contacto de referencia para un supervisor).
function addReferenteSu() {
    // 2. $.ajax({ ... });
    //    Utiliza la función 'ajax' de la librería jQuery (indicado por '$') para realizar una
    //    petición HTTP asíncrona.
    $.ajax({
        // 3. url: 'Url.Action("AddReferenteSu", "Supervisor")',
        //    Especifica la URL a la que se enviará la petición AJAX. Se utiliza la sintaxis de
        //    ASP.NET MVC ('Url.Action') para generar la URL de la acción del controlador llamada
        //    "AddReferenteSu" dentro del controlador llamado "Supervisor". Esto asegura que la URL
        //    sea correcta incluso si la estructura de las rutas de la aplicación cambia.
        url: '@Url.Action("AddReferenteSu", "Supervisor")',
        // 4. data: $("#divReferentesSu *[name]").serialize(),
        //    Especifica los datos que se enviarán al servidor con la petición AJAX.
        //    - $("#divReferentesSu"): Utiliza el selector de jQuery para obtener el elemento del
        //      DOM con el ID 'divReferentesSu'. Se espera que este div contenga los campos del
        //      formulario relacionados con la adición de un referente Su.
        //    - "*[name]": Selecciona todos los elementos dentro del 'divReferentesSu' que tienen
        //      un atributo 'name'. Estos suelen ser los campos de un formulario (input, select,
        //      textarea, etc.).
        //    - ".serialize()": Convierte los valores de estos campos en una cadena de consulta
        //      (query string) codificada para ser enviada en la petición HTTP (por ejemplo,
        //      'nombre=valor&telefono=otroValor').
        data: $("#divReferentesSu *[name]").serialize(),
        // 5. success: function (html) { ... },
        //    Define una función que se ejecutará si la petición AJAX al servidor se completa
        //    con éxito (es decir, el servidor devuelve una respuesta con un código de estado HTTP
        //    que indica éxito, como 200 OK). El parámetro 'html' contendrá la respuesta del servidor,
        //    que se espera que sea código HTML.
        success: function (html) {
            // 6. $("#divReferentesSu").html(html);
            //    Utiliza jQuery para seleccionar el elemento del DOM con el ID 'divReferentesSu'
            //    y reemplaza su contenido HTML con el HTML recibido del servidor en la respuesta
            //    AJAX. Esto sugiere que la acción "AddReferenteSu" en el servidor procesa la
            //    solicitud y devuelve el HTML actualizado para la sección de referentes Su,
            //    posiblemente incluyendo el nuevo referente agregado y/o un formulario para agregar
            //    otro.
            $("#divReferentesSu").html(html);
        }
    });
}

// 7. function deleteReferenteSu(numItem) { ... }
//    Declara una función JavaScript llamada 'deleteReferenteSu' que toma un argumento 'numItem'.
//    Se espera que esta función realice una llamada AJAX para eliminar un "referente Su" específico,
//    identificado por el valor de 'numItem'.
function deleteReferenteSu(numItem) {
    // 8. $.ajax({ ... });
    //    Utiliza la función 'ajax' de jQuery para realizar una petición HTTP asíncrona.
    $.ajax({
        // 9. url: 'Url.Action("DeleteReferenteSu", "Supervisor")' + "/" + numItem,
        //    Especifica la URL a la que se enviará la petición AJAX para eliminar un referente Su.
        //    - 'Url.Action("DeleteReferenteSu", "Supervisor")': Genera la URL de la acción del
        //      controlador llamada "DeleteReferenteSu" dentro del controlador llamado "Supervisor".
        //    - "/" + numItem: Concatena una barra y el valor de la variable 'numItem' a la URL.
        //      Esto sugiere que 'numItem' se pasa como un parámetro en la ruta (probablemente el ID
        //      del referente Su a eliminar) al servidor.
        url: '@Url.Action("DeleteReferenteSu", "Supervisor")' + "/" + numItem,
        // 10. data: $("#divReferentesSu *[name]").serialize(),
        //     Similar a la función 'addReferenteSu', serializa los datos de los campos dentro del
        //     'divReferentesSu' y los envía al servidor con la petición AJAX. Esto podría incluir
        //     otros datos necesarios para la operación de eliminación, aunque en este caso, el ID
        //     del elemento a eliminar se pasa en la URL.
        data: $("#divReferentesSu *[name]").serialize(),
        // 11. success: function (html) { ... },
        //     Define una función que se ejecutará si la petición AJAX al servidor se completa
        //     con éxito. El parámetro 'html' contendrá la respuesta del servidor (se espera que sea HTML).
        success: function (html) {
            // 12. $("#divReferentesSu").html(html);
            //     Reemplaza el contenido HTML del elemento con el ID 'divReferentesSu' con el HTML
            //     recibido del servidor. Esto sugiere que la acción "DeleteReferenteSu" en el
            //     servidor procesa la solicitud de eliminación y devuelve el HTML actualizado para la
            //     sección de referentes Su, reflejando la eliminación del elemento correspondiente.
            $("#divReferentesSu").html(html);
        }
    });
}
}
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
