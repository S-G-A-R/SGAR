@model SGAR.AppWebMVC.Models.Supervisor

@{
    ViewData["Title"] = "Edit";
}

<div class="card card-ancho-personalizado">
    <div class="card-header d-flex justify-content-between align-items-center ">
        <h4>Editar Supervisor</h4>
        <i class="bi bi-pencil-square" style="font-size: 1.5rem;"></i>
    </div>
    <div class="card-body card-ancho-personalizado">
        <form asp-action="Edit" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
           

            <div class="card">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-4">
                        <i class="bi bi-person-fill me-2"></i>
                        <h4 class="mb-0">Datos Personales</h4>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-4">
                            <label asp-for="Nombre" class="control-label required"></label>
                            <input asp-for="Nombre" class="form-control" />
                            <span asp-validation-for="Nombre" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="Apellido" class="control-label required"></label>
                            <input asp-for="Apellido" class="form-control" />
                            <span asp-validation-for="Apellido" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="Telefono" class="control-label"></label>
                            <input asp-for="Telefono" class="form-control" />
                            <span asp-validation-for="Telefono" class="text-danger"></span>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-6">
                                <label asp-for="CorreoPersonal" class="control-label"></label>
                                <input asp-for="CorreoPersonal" class="form-control" />
                                <span asp-validation-for="CorreoPersonal" class="text-danger"></span>
                            </div>
                            <div class="form-group col-md-6">
                                <label asp-for="Dui" class="control-label required"></label>
                                <input asp-for="Dui" class="form-control" />
                                <span asp-validation-for="Dui" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
           
            <div class="row m-2" id="divReferentesSu">
                <partial name="_ReferentesSupervisor" model="Model.ReferentesSupervisores" />
            </div>

            <div class="row">
                <div class="card">
                    <div class="card-body card-ancho-personalizado">
                        <div class="d-flex align-items-center mb-4">
                            <i class="bi bi-telephone-fill me-2"></i>
                            <h4 class="mb-0">Datos de Contacto</h4>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="Codigo" class="control-label required"></label>
                            <input asp-for="Codigo" class="form-control" />
                            <span asp-validation-for="Codigo" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="TelefonoLaboral" class="control-label required"></label>
                            <input asp-for="TelefonoLaboral" class="form-control" />
                            <span asp-validation-for="TelefonoLaboral" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-4">
                            <label asp-for="CorreoLaboral" class="control-label required"></label>
                            <input asp-for="CorreoLaboral" class="form-control" />
                            <span asp-validation-for="CorreoLaboral" class="text-danger"></span>
                        </div>
                       
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="form-group col-md-6">
                                    <label for="FotoFile" class="form-label fw-semibold">Foto</label>
                                    <div class="input-group">
                                        <input type="file" id="FotoFile" name="FotoFile" class="form-control" />
                                        <button class="btn btn-outline-danger" type="button" onclick="resetInputFieldAndPreview('FotoFile','FotoPreview')">Quitar</button>
                                    </div>
                                </div>
                                <div class="col-md-6 text-center">
                                    @if (Model.Foto != null && Model.Foto.Length > 0)
                                    {
                                        string base64Image = Convert.ToBase64String(Model.Foto);
                                        string imageUrl = $"data:image/png;base64,{base64Image}";
                                        <div id="FotoPreviewDiv" class="mt-3 mt-md-0">
                                            <img id="FotoPreview" src="@imageUrl" alt="Vista previa de la imagen" class="img-fluid rounded" style="max-width: 200px; max-height: 200px;">
                                        </div>
                                    }
                                    else
                                    {
                                        <div id="FotoPreviewDiv" style="display: none;" class="mt-3 mt-md-0">
                                            <img id="FotoPreview" src="#" alt="Vista previa de la imagen" class="img-fluid rounded" style="max-width: 200px; max-height: 200px;">
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                </div>

               
            <div style="background-color: white; padding: 10px; text-align: center;">
                <form asp-action="Guardar">
                    <input type="hidden" asp-for="Id" />
                    <input type="submit" value="Guardar" class="btn btn-success" />
                    <a asp-action="Index" class="btn btn-danger "><i></i> cancelar</a>
                </form>
            </div>
        </form>
    </div>
</div>
<style>
   
    .form-control:focus {
        border-color: lightgreen;
        box-shadow: 0 0 0 0.2rem rgba(144, 238, 144, 0.25);
    }
    .card {
        margin: 20px auto;
        max-width: 900px;
    }

    .card-ancho-personalizado {
        width: 95%; /* Ajusta este valor según el ancho que desees */
        margin-left: auto; /* Opcional: para centrar la tarjeta */
        margin-right: auto; /* Opcional: para centrar la tarjeta */
    }

   
</style>



@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

<script>
    // 1. document.getElementById('FotoFile').addEventListener('change', function (event) { ... });
    //    Selecciona el elemento del DOM con el ID 'FotoFile' (se espera que sea un input de tipo file)
    //    y le agrega un "escuchador de eventos" para el evento 'change'. Este evento se dispara
    //    cuando el valor del input file ha sido cambiado por el usuario (es decir, cuando se selecciona
    //    un archivo). La función anónima proporcionada como segundo argumento se ejecutará cuando
    //    ocurra este evento. El objeto 'event' contiene información sobre el evento, incluyendo el
    //    archivo seleccionado. Dentro de esta función, se llama a la función 'previewImage' para
    //    mostrar la vista previa del archivo seleccionado, utilizando 'FotoPreview' como ID del
    //    elemento img donde se mostrará la vista previa y 'FotoPreviewDiv' como ID del elemento div
    //    que contiene la vista previa.
    document.getElementById('FotoFile').addEventListener('change', function (event) {
        previewImage(event, 'FotoPreview', 'FotoPreviewDiv');
    });

    // 2. function previewImage(event, previewImageId, previewDivId) { ... }
    //    Declara una función llamada 'previewImage' que toma tres argumentos: el objeto del evento
    //    'change', el ID del elemento img donde se mostrará la vista previa y el ID del elemento div
    //    que contiene la vista previa. Esta función se encarga de leer el archivo seleccionado y
    //    mostrarlo como una vista previa en la página.
    function previewImage(event, previewImageId, previewDivId) {
        // 3. const file = event.target.files[0];
        //    Obtiene el primer archivo seleccionado por el usuario desde la propiedad 'files' del
        //    elemento que disparó el evento ('event.target', que en este caso es el input file).
        //    'event.target.files' es una lista de archivos, incluso si el input no tiene el atributo
        //    'multiple', siempre será una lista (con un máximo de un elemento en ese caso).
        const file = event.target.files[0];
        // 4. const preview = document.getElementById(previewDivId);
        //    Selecciona el elemento del DOM que actuará como contenedor de la vista previa usando el ID
        //    proporcionado en 'previewDivId'.
        const preview = document.getElementById(previewDivId);
        // 5. const imagePreview = document.getElementById(previewImageId);
        //    Selecciona el elemento img del DOM donde se mostrará la imagen de vista previa usando el ID
        //    proporcionado en 'previewImageId'.
        const imagePreview = document.getElementById(previewImageId);

        // 6. if (file) { ... } else { ... }
        //    Verifica si se ha seleccionado un archivo (es decir, si 'file' no es null o undefined).
        if (file) {
            // 7. const fileReader = new FileReader();
            //     Crea una nueva instancia del objeto FileReader. FileReader permite a las aplicaciones
            //     web leer el contenido de los archivos (o buffers de datos brutos) almacenados en el
            //     cliente de forma asíncrona.
            const fileReader = new FileReader();

            // 8. fileReader.onload = function (e) { ... };
            //     Define una función que se ejecutará cuando la operación de lectura del FileReader se
            //     haya completado con éxito. El objeto 'e' (para evento) contiene el resultado de la lectura.
            fileReader.onload = function (e) {
                // 9. imagePreview.src = e.target.result;
                //     Asigna el resultado de la lectura del archivo (que es una URL de datos representando
                //     la imagen) a la propiedad 'src' del elemento img de vista previa. Esto hace que la
                //     imagen se muestre en el elemento img.
                imagePreview.src = e.target.result;
                // 10. preview.style.display = 'block';
                //     Establece la propiedad 'display' del estilo del elemento div de vista previa a 'block',
                //     haciéndolo visible si estaba oculto previamente.
                preview.style.display = 'block';
            };

            // 11. fileReader.readAsDataURL(file);
            //     Inicia la lectura del contenido del archivo como una URL de datos (data URL). Una
            //     data URL es un esquema de URL que proporciona una forma de incluir un recurso pequeño
            //     en línea en documentos HTML y CSS. Para imágenes, la URL de datos contendrá la
            //     representación Base64 de la imagen. Cuando la lectura se complete, se disparará el
            //     evento 'onload' del FileReader.
            fileReader.readAsDataURL(file);
        } else {
            // 12. imagePreview.src = '#';
            //     Si no se ha seleccionado ningún archivo (o se ha removido la selección), se establece
            //     la propiedad 'src' del elemento img de vista previa a '#', lo que generalmente hace
            //     que no se muestre ninguna imagen.
            imagePreview.src = '#';
            // 13. preview.style.display = 'none';
            //     Si no se ha seleccionado ningún archivo, se establece la propiedad 'display' del
            //     estilo del elemento div de vista previa a 'none', ocultándolo.
            preview.style.display = 'none';
        }
    }

    // 14. function resetInputFieldAndPreview(inputFileId, previewImageId) { ... }
    //     Declara una función llamada 'resetInputFieldAndPreview' que toma dos argumentos: el ID del
    //     input file y el ID del elemento img de vista previa. Esta función se encarga de resetear
    //     el input file y la vista previa de la imagen.
    function resetInputFieldAndPreview(inputFileId, previewImageId) {
        // 15. resetInputField(inputFileId);
        //     Llama a la función 'resetInputField' (definida más adelante) para resetear el valor del
        //     input file especificado por 'inputFileId'.
        resetInputField(inputFileId);
        // 16. const previewImage = document.getElementById(previewImageId);
        //     Selecciona el elemento img de vista previa usando el ID proporcionado en 'previewImageId'.
        const previewImage = document.getElementById(previewImageId);
        // 17. const preview = document.getElementById(previewImageId + 'Div');
        //     Selecciona el elemento div que contiene la vista previa. Se asume que el ID de este div
        //     se forma concatenando el ID de la imagen de vista previa con la cadena 'Div'.
        const preview = document.getElementById(previewImageId + 'Div');
        // 18. if (previewImage) { ... }
        //     Verifica si el elemento img de vista previa fue encontrado en el DOM.
        if (previewImage) {
            // 19. previewImage.src = "#";
            //     Establece la propiedad 'src' del elemento img de vista previa a '#', removiendo la
            //     imagen mostrada.
            previewImage.src = "#";
            // 20. preview.style.display = "none";
            //     Establece la propiedad 'display' del estilo del elemento div de vista previa a 'none',
            //     ocultándolo.
            preview.style.display = "none";
        }
    }

    // 21. function resetInputField(inputFileId) { ... }
    //     Declara una función llamada 'resetInputField' que toma un argumento: el ID del input file
    //     que se desea resetear. Esta función intenta resetear el valor del input file.
    function resetInputField(inputFileId) {
        // 22. const inputFile = document.getElementById(inputFileId);
        //     Selecciona el elemento del DOM con el ID proporcionado en 'inputFileId'. Se espera que
        //     este elemento sea un input de tipo file.
        const inputFile = document.getElementById(inputFileId);
        // 23. if (inputFile) { ... }
        //     Verifica si el elemento input file fue encontrado en el DOM (es decir, si 'inputFile'
        //     no es null).
        if (inputFile) {
            // 24. const tempInputFile = document.createElement("input");
            //     Crea un nuevo elemento input de forma dinámica utilizando el método
            //     document.createElement(). Este nuevo elemento aún no está agregado al DOM.
            const tempInputFile = document.createElement("input");
            // 25. tempInputFile.type = "file";
            //     Establece el atributo 'type' del elemento input recién creado a "file". Esto lo
            //     convierte en un input para la selección de archivos.
            tempInputFile.type = "file";
            // 26. tempInputFile.value = "";
            //     Establece el valor del nuevo input file a una cadena vacía. **Nota:** Por razones de
            //     seguridad, en muchos navegadores, no se permite establecer programáticamente el valor
            //     de un input file de esta manera.
            tempInputFile.value = "";
            // 27. inputFile.value = tempInputFile.value;
            //     Intenta asignar el valor del nuevo input file (que está vacío) al valor del input
            //     file original. **Nota:** Debido a restricciones de seguridad del navegador, esta
            //     línea podría no tener el efecto deseado de limpiar el valor del input file en todos
            //     los navegadores. Una forma más confiable de resetear un input file es reemplazar el
            //     elemento en el DOM.
            inputFile.value = tempInputFile.value;
            // 28. tempInputFile.remove();
            //     Remueve el elemento input file temporal del DOM. Este elemento solo se creó para
            //     intentar obtener un valor vacío para asignar al input file original.
            tempInputFile.remove();
        }
    }

    // 1. function addReferenteSu() { ... }
//    Declara una función JavaScript llamada 'addReferenteSu'. Se espera que esta función realice
//    una llamada AJAX para agregar un nuevo "referente Su" (la funcionalidad específica no está
//    clara sin más contexto, pero podría referirse a un contacto de referencia para un supervisor
//    o un tipo de usuario específico).
function addReferenteSu() {
    // 2. $.ajax({ ... });
    //    Utiliza la función 'ajax' de la librería jQuery (indicado por '$') para realizar una
    //    petición HTTP asíncrona.
    $.ajax({
        // 3. url: 'Url.Action("AddReferenteSu")',
        //    Especifica la URL a la que se enviará la petición AJAX. Se utiliza la sintaxis de
        //    ASP.NET MVC ('Url.Action') para generar la URL de la acción del controlador llamada
        //    "AddReferenteSu". Esto asegura que la URL sea correcta incluso si la estructura de
        //    las rutas de la aplicación cambia. El nombre del controlador se omite aquí, por lo que
        //    se asume que la acción está en el mismo controlador donde se encuentra este código
        //    JavaScript o se utiliza la configuración de rutas por defecto.
        url: '@Url.Action("AddReferenteSu")',
        // 4. data: $("#divReferentesSu *[name]").serialize(),
        //    Especifica los datos que se enviarán al servidor con la petición AJAX.
        //    - $("#divReferentesSu"): Utiliza el selector de jQuery para obtener el elemento del
        //      DOM con el ID 'divReferentesSu'. Se espera que este div contenga los campos del
        //      formulario relacionados con la adición de un referente Su.
        //    - "*[name]": Selecciona todos los elementos dentro del 'divReferentesSu' que tienen
        //      un atributo 'name'. Estos suelen ser los campos de un formulario (input, select,
        //      textarea, etc.).
        //    - ".serialize()": Convierte los valores de estos campos en una cadena de consulta
        //      (query string) codificada para ser enviada en la petición HTTP (por ejemplo,
        //      'nombre=valor&telefono=otroValor').
        data: $("#divReferentesSu *[name]").serialize(),
        // 5. success: function (html) { ... },
        //    Define una función que se ejecutará si la petición AJAX al servidor se completa
        //    con éxito (es decir, el servidor devuelve una respuesta con un código de estado HTTP
        //    que indica éxito, como 200 OK). El parámetro 'html' contendrá la respuesta del servidor,
        //    que se espera que sea código HTML.
        success: function (html) {
            // 6. $("#divReferentesSu").html(html);
            //    Utiliza jQuery para seleccionar el elemento del DOM con el ID 'divReferentesSu'
            //    y reemplaza su contenido HTML con el HTML recibido del servidor en la respuesta
            //    AJAX. Esto sugiere que la acción "AddReferenteSu" en el servidor procesa la
            //    solicitud y devuelve el HTML actualizado para la sección de referentes Su,
            //    posiblemente incluyendo el nuevo referente agregado y/o un formulario para agregar
            //    otro.
            $("#divReferentesSu").html(html);
        }
    });
}

// 7. function deleteReferenteSu(numItem) { ... }
//    Declara una función JavaScript llamada 'deleteReferenteSu' que toma un argumento 'numItem'.
//    Se espera que esta función realice una llamada AJAX para eliminar un "referente Su" específico,
//    identificado por el valor de 'numItem'.
function deleteReferenteSu(numItem) {
    // 8. $.ajax({ ... });
    //    Utiliza la función 'ajax' de jQuery para realizar una petición HTTP asíncrona.
    $.ajax({
        // 9. url: 'Url.Action("DeleteReferenteSu")' + "/" + numItem,
        //    Especifica la URL a la que se enviará la petición AJAX para eliminar un referente Su.
        //    - 'Url.Action("DeleteReferenteSu")': Genera la URL de la acción del controlador
        //      llamada "DeleteReferenteSu". Al igual que en 'addReferenteSu', se asume que la
        //      acción está en el mismo controlador o se utilizan las rutas por defecto.
        //    - "/" + numItem: Concatena una barra y el valor de la variable 'numItem' a la URL.
        //      Esto sugiere que 'numItem' se pasa como un parámetro en la ruta (probablemente el ID
        //      del referente Su a eliminar) al servidor.
        url: '@Url.Action("DeleteReferenteSu")' + "/" + numItem,
        // 10. data: $("#divReferentesSu *[name]").serialize(),
        //     Similar a la función 'addReferenteSu', serializa los datos de los campos dentro del
        //     'divReferentesSu' y los envía al servidor con la petición AJAX. Esto podría incluir
        //     otros datos necesarios para la operación de eliminación, aunque en este caso, el ID
        //     del elemento a eliminar se pasa en la URL.
        data: $("#divReferentesSu *[name]").serialize(),
        // 11. success: function (html) { ... },
        //     Define una función que se ejecutará si la petición AJAX al servidor se completa
        //     con éxito. El parámetro 'html' contendrá la respuesta del servidor (se espera que sea HTML).
        success: function (html) {
            // 12. $("#divReferentesSu").html(html);
            //     Reemplaza el contenido HTML del elemento con el ID 'divReferentesSu' con el HTML
            //     recibido del servidor. Esto sugiere que la acción "DeleteReferenteSu" en el
            //     servidor procesa la solicitud de eliminación y devuelve el HTML actualizado para la
            //     sección de referentes Su, reflejando la eliminación del elemento correspondiente.
            $("#divReferentesSu").html(html);
        }
    });
}
</script>
}
