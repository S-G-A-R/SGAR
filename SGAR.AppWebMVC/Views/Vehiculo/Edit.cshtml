@model SGAR.AppWebMVC.Models.Vehiculo

@{
    ViewData["Title"] = "Editar Vehiculo";
}

<h1><i class="bi bi-pen me-3"></i>@ViewData["Title"]</h1>
<hr />
<div class="row">
    <div class="col-md">
        <form asp-action="Edit" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="row">
                <div class="form-group col-4">
                    <label asp-for="IdMarca" class="control-label"></label>
                    <select asp-for="IdMarca" class="form-control combo" asp-items="ViewBag.IdMarca"></select>
                </div>
                <div class="form-group col-4">
                    <label asp-for="Placa" class="control-label required"></label>
                    <input asp-for="Placa" class="form-control" />
                    <span asp-validation-for="Placa" class="text-danger"></span>
                </div>
                <div class="form-group col-4">
                    <label asp-for="Codigo" class="control-label required"></label>
                    <input asp-for="Codigo" class="form-control" />
                    <span asp-validation-for="Codigo" class="text-danger"></span>
                </div>
            </div>

            <div class="row">
                <div class="form-group col-3">
                    <label asp-for="IdTipoVehiculo" class="control-label"></label>
                    <select asp-for="IdTipoVehiculo" class="form-control combo" asp-items="ViewBag.IdTipoVehiculo"></select>
                </div>
                <div class="form-group col-3">
                    <label asp-for="Mecanico" class="control-label required"></label>
                    <input asp-for="Mecanico" class="form-control" />
                    <span asp-validation-for="Mecanico" class="text-danger"></span>
                </div>
                <div class="form-group col-3">
                    <label asp-for="Taller" class="control-label required"></label>
                    <input asp-for="Taller" class="form-control" />
                    <span asp-validation-for="Taller" class="text-danger"></span>
                </div>
                <div class="form-group col-3">
                    <label asp-for="IdOperador" class="control-label"></label>
                    <select asp-for="IdOperador" class="form-control combo" asp-items="ViewBag.IdOperador"></select>
                </div>
            </div>

            <div class="row">
                <div class="form-group col-4">
                    <label asp-for="Estado" class="control-label"></label>
                    <select asp-for="Estado" class="form-control combo">
                        <option selected value="">Seleccione el estado</option>
                        <option selected value="1">En Uso</option>
                        <option selected value="2">Mantenimiento</option>
                        <option selected value="3">En Desuso</option>
                    </select>
                    <span asp-validation-for="Estado" class="text-danger"></span>
                </div>
                <div class="form-group col-8">
                    <label asp-for="Descripcion" class="control-label"></label>
                    <textarea asp-for="Descripcion" class="form-control"></textarea>
                    <span asp-validation-for="Descripcion" class="text-danger"></span>
                </div>
            </div>
            <br />
            <div class="row">


                <div class="form-group col-6">
                    <label for="fotofile" class="control-label">Imagen</label>
                    <div class="input-group">
                        <input type="file" id="fotofile" name="fotofile" class="form-control" />
                        <div class="input-group-append">
                            <button class="btn btn-danger" type="button" onclick="resetInputFieldAndPreview('fotofile','FotoPreview')">Quitar</button>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    @if (Model.Foto != null && Model.Foto.Length > 0)
                    {
                        string base64Image = Convert.ToBase64String(Model.Foto);
                        string imageUrl = $"data:image/png;base64,{base64Image}";


                        <div id="FotoPreviewDiv">
                            <img id="FotoPreview" src="@imageUrl" alt="Vista previa de la imagen" style="max-width: 200px; max-height: 200px;">
                        </div>
                    }
                    else
                    {
                        <div id="FotoPreviewDiv" style="display: none;">
                            <img id="FotoPreview" src="#" alt="Vista previa de la imagen" style="max-width: 200px; max-height: 200px;">
                        </div>
                    }
                </div>
            </div>
            <div class="row mt-2">
                <div class="form-group col-1">
                    <input type="submit" value="Guardar" class="btn btn-success" />
                </div>
                <div class="col-1">
                    <a asp-action="Index" class="btn btn-info"><i class="bi bi-arrow-90deg-left me-1"></i> Volver</a>
                </div>
            </div>
        </form>
    </div>
</div>



<script>
   // 1. document.getElementById('fotofile').addEventListener('change', function (event) { ... });
//    Selecciona el elemento del DOM con el ID 'fotofile' (se espera que sea un input de tipo file)
//    y le agrega un "escuchador de eventos" para el evento 'change'. Este evento se dispara
//    cuando el valor del input file ha sido cambiado por el usuario (es decir, cuando se selecciona
//    un archivo). La función anónima proporcionada como segundo argumento se ejecutará cuando
//    ocurra este evento. El objeto 'event' contiene información sobre el evento, incluyendo el
//    archivo seleccionado.
document.getElementById('fotofile').addEventListener('change', function (event) {
    // 2. previewImage(event, 'FotoPreview', 'FotoPreviewDiv');
    //    Dentro de la función que se ejecuta al cambiar el input file, se llama a la función
    //    'previewImage'. Se le pasan tres argumentos:
    //    - 'event': El objeto del evento 'change'.
    //    - 'FotoPreview': Se espera que sea el ID de un elemento img en el DOM donde se mostrará
    //      la vista previa de la imagen.
    //    - 'FotoPreviewDiv': Se espera que sea el ID de un elemento div en el DOM que contiene la
    //      vista previa de la imagen. Este div podría ser mostrado u ocultado dependiendo de si
    //      se ha seleccionado un archivo.
    previewImage(event, 'FotoPreview', 'FotoPreviewDiv');
});

// 3. function previewImage(event, previewImageId, previewDivId) { ... }
//    Declara una función llamada 'previewImage' que toma tres argumentos: el objeto del evento,
//    el ID del elemento img para la vista previa y el ID del elemento div que contiene la vista previa.
function previewImage(event, previewImageId, previewDivId) {
    // 4. const file = event.target.files[0];
    //    Obtiene el primer archivo seleccionado por el usuario desde la propiedad 'files' del
    //    elemento que disparó el evento ('event.target', que en este caso es el input file).
    //    'event.target.files' es una lista de archivos, incluso si el input no tiene el atributo
    //    'multiple', siempre será una lista (con un máximo de un elemento en ese caso).
    const file = event.target.files[0];
    // 5. const preview = document.getElementById(previewDivId);
    //    Selecciona el elemento del DOM que actuará como contenedor de la vista previa usando el ID proporcionado.
    const preview = document.getElementById(previewDivId);
    // 6. const imagePreview = document.getElementById(previewImageId);
    //    Selecciona el elemento img del DOM donde se mostrará la imagen de vista previa usando el ID proporcionado.
    const imagePreview = document.getElementById(previewImageId);

    // 7. if (file) { ... } else { ... }
    //    Verifica si se ha seleccionado un archivo (es decir, si 'file' no es null o undefined).
    if (file) {
        // 8. const fileReader = new FileReader();
        //    Crea una nueva instancia del objeto FileReader. FileReader permite a las aplicaciones web
        //    leer el contenido de los archivos (o buffers de datos brutos) almacenados en el cliente
        //    de forma asíncrona.
        const fileReader = new FileReader();

        // 9. fileReader.onload = function (e) { ... };
        //    Define una función que se ejecutará cuando la operación de lectura del FileReader se haya
        //    completado con éxito. El objeto 'e' (para evento) contiene el resultado de la lectura.
        fileReader.onload = function (e) {
            // 10. imagePreview.src = e.target.result;
            //     Asigna el resultado de la lectura del archivo (que es una URL de datos representando
            //     la imagen) a la propiedad 'src' del elemento img de vista previa. Esto hace que la
            //     imagen se muestre en el elemento img.
            imagePreview.src = e.target.result;
            // 11. preview.style.display = 'block';
            //     Establece la propiedad 'display' del estilo del elemento div de vista previa a 'block',
            //     haciéndolo visible si estaba oculto previamente.
            preview.style.display = 'block';
        };

        // 12. fileReader.readAsDataURL(file);
        //     Inicia la lectura del contenido del archivo como una URL de datos (data URL). Una data
        //     URL es un esquema de URL que proporciona una forma de incluir un recurso pequeño en línea
        //     en documentos HTML y CSS. Para imágenes, la URL de datos contendrá la representación Base64
        //     de la imagen. Cuando la lectura se complete, se disparará el evento 'onload' del FileReader.
        fileReader.readAsDataURL(file);
    } else {
        // 13. imagePreview.src = '#';
        //     Si no se ha seleccionado ningún archivo (o se ha removido la selección), se establece la
        //     propiedad 'src' del elemento img de vista previa a '#', lo que generalmente hace que no
        //     se muestre ninguna imagen.
        imagePreview.src = '#';
        // 14. preview.style.display = 'none';
        //     Si no se ha seleccionado ningún archivo, se establece la propiedad 'display' del estilo
        //     del elemento div de vista previa a 'none', ocultándolo.
        preview.style.display = 'none';
    }
}

// 15. function resetInputFieldAndPreview(inputFileId, previewImageId) { ... }
//     Declara una función llamada 'resetInputFieldAndPreview' que toma dos argumentos: el ID del
//     input file y el ID del elemento img de vista previa. Esta función se encarga de resetear
//     el input file y la vista previa de la imagen.
function resetInputFieldAndPreview(inputFileId, previewImageId) {
    // 16. resetInputField(inputFileId);
    //     Llama a la función 'resetInputField' para resetear el valor del input file especificado.
    resetInputField(inputFileId);
    // 17. const previewImage = document.getElementById(previewImageId);
    //     Selecciona el elemento img de vista previa usando el ID proporcionado.
    const previewImage = document.getElementById(previewImageId);
    // 18. const preview = document.getElementById(previewImageId + 'Div');
    //     Selecciona el elemento div que contiene la vista previa. Se asume que el ID de este div
    //     se forma concatenando el ID de la imagen de vista previa con la cadena 'Div'.
    const preview = document.getElementById(previewImageId + 'Div');
    // 19. if (previewImage) { ... }
    //     Verifica si el elemento img de vista previa fue encontrado en el DOM.
    if (previewImage) {
        // 20. previewImage.src = "#";
        //     Establece la propiedad 'src' del elemento img de vista previa a '#', removiendo la imagen mostrada.
        previewImage.src = "#";
        // 21. preview.style.display = "none";
        //     Establece la propiedad 'display' del estilo del elemento div de vista previa a 'none', ocultándolo.
        preview.style.display = "none";
    }
}

// 22. function resetInputField(inputFileId) { ... }
//     Declara una función llamada 'resetInputField' que toma un argumento: el ID del input file.
//     Esta función se encarga de resetear el valor del input file.
function resetInputField(inputFileId) {
    // 23. const inputFile = document.getElementById(inputFileId);
    //     Selecciona el elemento input file usando el ID proporcionado.
    const inputFile = document.getElementById(inputFileId);
    // 24. if (inputFile) { ... }
    //     Verifica si el elemento input file fue encontrado en el DOM.
    if (inputFile) {
        // 25. const tempInputFile = document.createElement("input");
        //     Crea un nuevo elemento input de forma dinámica.
        const tempInputFile = document.createElement("input");
        // 26. tempInputFile.type = "file";
        //     Establece el tipo del nuevo input como "file".
        tempInputFile.type = "file";
        // 27. tempInputFile.value = "";
        //     Establece el valor del nuevo input file a una cadena vacía.
        tempInputFile.value = "";
        // 28. inputFile.value = tempInputFile.value;
        //     Intenta asignar el valor del nuevo input file (que está vacío) al valor del input file original.
        //     **Nota:** Por razones de seguridad, en muchos navegadores, no se permite establecer
        //     programáticamente el valor de un input file a una cadena vacía de esta manera.
        //     Una forma más segura de resetear un input file es reemplazarlo con un nuevo elemento.
        inputFile.value = tempInputFile.value;
        // 29. tempInputFile.remove();
        //     Remueve el elemento input file temporal del DOM, ya que solo se usó para intentar
        //     obtener un valor vacío.
        tempInputFile.remove();
    }
}

// 30. function addReferenteSu() { ... }
//     Declara una función llamada 'addReferenteSu'. Se espera que esta función realice una
//     llamada AJAX para agregar un "referente su" (la funcionalidad específica no está clara
//     sin más contexto).
function addReferenteSu() {
    // 31. $.ajax({ ... });
    //     Utiliza la función 'ajax' de la librería jQuery (indicado por el '$') para realizar
    //     una petición HTTP asíncrona.
    $.ajax({
        // 32. url: '@Url.Action("AddReferenteSu")',
        //     Especifica la URL a la que se enviará la petición AJAX. Se utiliza la sintaxis de
        //     ASP.NET MVC ('Url.Action') para generar la URL de la acción del controlador llamada
        //     "AddReferenteSu". Esto asegura que la URL sea correcta incluso si la estructura de
        //     las rutas de la aplicación cambia.
        url: '@Url.Action("AddReferenteSu")',
        // 33. data: $("#divReferentesSu *[name]").serialize(),
        //     Especifica los datos que se enviarán al servidor.
        //     - $("#divReferentesSu"): Selecciona el elemento del DOM con el ID 'divReferentesSu'
        //       utilizando el selector de jQuery. Se espera que este div contenga los campos del
        //       formulario relacionados con los "referentes su".
        //     - "*[name]": Selecciona todos los elementos dentro del 'divReferentesSu' que tienen
        //       un atributo 'name'. Estos suelen ser los campos de un formulario (input, select, textarea).
        //     - ".serialize()": Convierte los valores de estos campos en una cadena de consulta
        //       (query string) codificada para ser enviada en la petición HTTP (por ejemplo,
        //       'nombre=valor&apellido=otroValor').
        data: $("#divReferentesSu *[name]").serialize(),
        // 34. success: function (html) { ... },
        //     Define una función que se ejecutará si la petición AJAX al servidor se completa
        //     con éxito (es decir, el servidor devuelve una respuesta con un código de estado HTTP
        //     que indica éxito, como 200 OK). El parámetro 'html' contendrá la respuesta del servidor,
        //     que se espera que sea código HTML.
        success: function (html) {
            // 35. $("#divReferentesSu").html(html);
            //     Utiliza jQuery para seleccionar el elemento con el ID 'divReferentesSu' y
            //     reemplaza su contenido HTML con el HTML recibido del servidor en la respuesta AJAX.
            //     Esto sugiere que la acción "AddReferenteSu" en el servidor devuelve el HTML actualizado
            //     para la sección de "referentes su".
            $("#divReferentesSu").html(html);
        }
    });
}

// 36. function deleteReferenteSu(numItem) { ... }
//     Declara una función llamada 'deleteReferenteSu' que toma un argumento 'numItem'. Se espera
//     que esta función realice una llamada AJAX para eliminar un "referente su" específico,
//     identificado por 'numItem'.
function deleteReferenteSu(numItem) {
    // 37. $.ajax({ ... });
    //     Utiliza la función 'ajax' de jQuery para realizar una petición HTTP asíncrona.
    $.ajax({
        // 38. url: '@Url.Action("DeleteReferenteSu")' + "/" + numItem,
        //     Especifica la URL a la que se enviará la petición AJAX para eliminar un referente.
        //     - '@Url.Action("DeleteReferenteSu")': Genera la URL de la acción del controlador
        //       llamada "DeleteReferenteSu".
        //     - "/" + numItem: Concatena una barra y el valor de 'numItem' a la URL, sugiriendo que
        //       'numItem' se pasa como un parámetro en la ruta para identificar el referente a eliminar.
        url: '@Url.Action("DeleteReferenteSu")' + "/" + numItem,
        // 39. data: $("#divReferentesSu *[name]").serialize(),
        //     Similar a la función 'addReferenteSu', serializa los datos de los campos dentro del
        //     'divReferentesSu' y los envía al servidor con la petición AJAX. Esto podría incluir
        //     otros datos necesarios para la operación de eliminación.
        data: $("#divReferentesSu *[name]").serialize(),
        // 40. success: function (html) { ... },
        //     Define una función que se ejecutará si la petición AJAX al servidor se completa
        //     con éxito. El parámetro 'html' contendrá la respuesta del servidor (se espera que sea HTML).
        success: function (html) {
            // 41. $("#divReferentesSu").html(html);
            //     Reemplaza el contenido HTML del elemento con el ID 'divReferentesSu' con el HTML
            //     recibido del servidor. Esto sugiere que la acción "DeleteReferenteSu" en el
            //     servidor devuelve el HTML actualizado para la sección de "referentes su" después
            //     de la eliminación.
            $("#divReferentesSu").html(html);
        }
    });

</script>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
