@model SGAR.AppWebMVC.Models.Operador

@{
    ViewData["Title"] = "Edit";
}

<h1 class="text-center">Editando Operador</h1>

<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-action="Edit" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="card">
                <div class="card-header">
                    Datos Personales
                </div>
                <div class="card-body">
            <div class="row p-2">
                <div class="form-group col-4">
                            <label asp-for="Nombre" class="control-label required"></label>
                    <input asp-for="Nombre" class="form-control" />
                    <span asp-validation-for="Nombre" class="text-danger"></span>
                </div>
                <div class="form-group col-4">
                    <label asp-for="Apellido" class="control-label"></label>
                    <input asp-for="Apellido" class="form-control" />
                    <span asp-validation-for="Apellido" class="text-danger"></span>
                </div>
                <div class="form-group col-4">
                    <label asp-for="TelefonoPersonal" class="control-label"></label>
                    <input asp-for="TelefonoPersonal" class="form-control" />
                    <span asp-validation-for="TelefonoPersonal" class="text-danger"></span>
                </div>
            </div>

            <div class="row p-2">
                <div class="form-group col-4">
                    <label asp-for="CorreoPersonal" class="control-label"></label>
                    <input asp-for="CorreoPersonal" class="form-control" />
                    <span asp-validation-for="CorreoPersonal" class="text-danger"></span>
                </div>
                <div class="form-group col-4">
                            <label asp-for="Dui" class="control-label required"></label>
                    <input asp-for="Dui" class="form-control" />
                    <span asp-validation-for="Dui" class="text-danger"></span>
                </div>
            </div>

            <div class="row m-2" id="divReferentesOp">
                <partial name="_ReferentesOperador" model="Model.ReferentesOperador" />
            </div>
             </div>
            </div>

            <br />

            <div class="card">
                <div class="card-header">
                    Datos Personales
                </div>
                <div class="card-body">
            <div class="row p-2">
                <div class="form-group col-4">
                            <label asp-for="CodigoOperador" class="control-label required"></label>
                    <input asp-for="CodigoOperador" class="form-control" />
                    <span asp-validation-for="CodigoOperador" class="text-danger"></span>
                </div>
                <div class="form-group col-4">
                            <label asp-for="CorreoLaboral" class="control-label required"></label>
                    <input asp-for="CorreoLaboral" class="form-control" />
                    <span asp-validation-for="CorreoLaboral" class="text-danger"></span>
                </div>
                <div class="form-group col-4">
                            <label asp-for="TelefonoLaboral" class="control-label required"></label>
                    <input asp-for="TelefonoLaboral" class="form-control" />
                    <span asp-validation-for="TelefonoLaboral" class="text-danger"></span>
                </div>
            </div>

            <div class="row p-2">
                <div class="form-group col-4">
                    <label asp-for="VehiculoId" class="control-label"></label>
                    <select asp-for="VehiculoId" class="form-control combo" asp-items="ViewBag.VehiculoId"></select>
                    <span asp-validation-for="VehiculoId" class="text-danger"></span>
                </div>
                <div class="form-group col-4">
                    <label asp-for="Ayudantes" class="control-label"></label>
                    <input asp-for="Ayudantes" class="form-control" />
                    <span asp-validation-for="Ayudantes" class="text-danger"></span>
                </div>
            </div>

            <div class="row p-2">
                <div class="form-group col-6">
                    <label for="FotoFile" class="control-label">Foto</label>
                    <div class="input-group">
                        <input type="file" id="FotoFile" name="FotoFile" class="form-control" />
                        <div class="input-group-append">
                            <button class="btn btn-danger" type="button" onclick="resetInputFieldAndPreview('FotoFile','FotoPreview')">Quitar</button>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    @if (Model.Foto != null && Model.Foto.Length > 0)
                    {
                        string base64Image = Convert.ToBase64String(Model.Foto);
                        string imageUrl = $"data:image/png;base64,{base64Image}";

                        <div id="FotoPreviewDiv">
                            <img id="FotoPreview" src="@imageUrl" alt="Vista previa de la imagen" style="max-width: 100px; max-height: 100px; border-radius: 10px;">
                        </div>
                    }
                    else
                    {
                        <div id="FotoPreviewDiv" style="display: none;">
                            <img id="FotoPreview" src="#" alt="Vista previa de la imagen" style="max-width: 100px; max-height: 100px; border-radius: 10px;">
                        </div>
                    }
                </div>
            </div>

            <div class="row p-2">
                <div class="form-group col-6">
                    <label for="SolvenciaFile" class="control-label">Solvencia</label>
                    <div class="input-group">
                        <input type="file" id="SolvenciaFile" name="SolvenciaFile" class="form-control" />
                        <div class="input-group-append">
                            <button class="btn btn-danger" type="button" onclick="resetInputFieldAndPreview('SolvenciaFile','SolvenciaPreview')">Quitar</button>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    @if (Model.SolvenciaDoc != null && Model.SolvenciaDoc.Length > 0)
                    {
                        string base64Image = Convert.ToBase64String(Model.SolvenciaDoc);
                        string imageUrl = $"data:image/png;base64,{base64Image}";

                        <div id="SolvenciaPreviewDiv">
                                    <img id="SolvenciaPreview" src="@imageUrl" alt="Documento de Antecedentes cargado." style="max-width: 200px; max-height: 200px;">
                        </div>
                    }
                    else
                    {
                        <div id="SolvenciaPreviewDiv" style="display: none;">
                                    <img id="SolvenciaPreview" src="#" alt="Documento de Solvencia cargado." style="max-width: 200px; max-height: 200px;">
                        </div>
                    }
                </div>
            </div>

            <div class="row p-2">
                <div class="form-group col-6">
                    <label for="LicenciaFile" class="control-label">Licencia</label>
                    <div class="input-group">
                        <input type="file" id="LicenciaFile" name="LicenciaFile" class="form-control" />
                        <div class="input-group-append">
                            <button class="btn btn-danger" type="button" onclick="resetInputFieldAndPreview('LicenciaFile','LicenciaPreview')">Quitar</button>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    @if (Model.LicenciaDoc != null && Model.LicenciaDoc.Length > 0)
                    {
                        string base64Image = Convert.ToBase64String(Model.LicenciaDoc);
                        string imageUrl = $"data:image/png;base64,{base64Image}";

                        <div id="LicenciaPreviewDiv">
                                    <img id="LicenciaPreview" src="@imageUrl" alt="Documento de Licencia cargado." style="max-width: 200px; max-height: 200px;">
                        </div>
                    }
                    else
                    {
                        <div id="LicenciaPreviewDiv" style="display: none;">
                                    <img id="LicenciaPreview" src="#" alt="Documento de Licencia cargado." style="max-width: 200px; max-height: 200px;">
                        </div>
                    }
                </div>
            </div>

            <div class="row p-2">
                <div class="form-group col-6">
                    <label for="AntecedentesFile" class="control-label">Antecedentes</label>
                    <div class="input-group">
                        <input type="file" id="AntecedentesFile" name="AntecedentesFile" class="form-control" />
                        <div class="input-group-append">
                            <button class="btn btn-danger" type="button" onclick="resetInputFieldAndPreview('AntecedentesFile','AntecedentesPreview')">Quitar</button>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    @if (Model.AntecedentesDoc != null && Model.AntecedentesDoc.Length > 0)
                    {
                        string base64Image = Convert.ToBase64String(Model.AntecedentesDoc);
                        string imageUrl = $"data:image/png;base64,{base64Image}";

                        <div id="AntecedentesPreviewDiv">
                                    <img id="AntecedentesPreview" src="@imageUrl" alt="Documento de Antecedentes cargado." style="max-width: 200px; max-height: 200px;">
                        </div>
                    }
                    else
                    {
                        <div id="AntecedentesPreviewDiv" style="display: none;">
                                    <img id="AntecedentesPreview" src="#" alt="Documento de Antecedentes cargado." style="max-width: 200px; max-height: 200px;">
                        </div>
                    }
                </div>
            </div>
                </div>
            </div>


            <div class="row p-4">
                <div class="form-group text-center">
                    <input type="submit" value="Guardar" class="btn btn-success" />
                    <a asp-action="Index" class="btn btn-secondary"><i class="bi bi-arrow-left"></i> Volver</a>
                </div>
            </div>
        </form>
    </div>
</div>



<script>
    // 1. document.getElementById('FotoFile').addEventListener('change', function (event) { ... });
    //    Selecciona el elemento del DOM con el ID 'FotoFile' (se espera que sea un input de tipo file)
    //    y le agrega un "escuchador de eventos" para el evento 'change'. Este evento se dispara
    //    cuando el valor del input file ha sido cambiado por el usuario (es decir, cuando se selecciona
    //    un archivo). La función anónima proporcionada como segundo argumento se ejecutará cuando
    //    ocurra este evento. El objeto 'event' contiene información sobre el evento, incluyendo el
    //    archivo seleccionado. Dentro de esta función, se llama a la función 'previewImage' para
    //    mostrar la vista previa del archivo seleccionado, utilizando 'FotoPreview' como ID del
    //    elemento img donde se mostrará la vista previa y 'FotoPreviewDiv' como ID del elemento div
    //    que contiene la vista previa.
    document.getElementById('FotoFile').addEventListener('change', function (event) {
        previewImage(event, 'FotoPreview', 'FotoPreviewDiv');
    });

    // 2. document.getElementById('SolvenciaFile').addEventListener('change', function (event) { ... });
    //    Similar al paso 1, pero para el elemento con el ID 'SolvenciaFile'. Cuando se selecciona un
    //    archivo en este input, se llama a 'previewImage' con 'SolvenciaPreview' y 'SolvenciaPreviewDiv'
    //    para mostrar la vista previa del archivo de solvencia.
    document.getElementById('SolvenciaFile').addEventListener('change', function (event) {
        previewImage(event, 'SolvenciaPreview', 'SolvenciaPreviewDiv');
    });

    // 3. document.getElementById('LicenciaFile').addEventListener('change', function (event) { ... });
    //    Similar a los pasos 1 y 2, pero para el elemento con el ID 'LicenciaFile'. La vista previa
    //    del archivo de licencia se mostrará en el elemento con ID 'LicenciaPreview' dentro del div
    //    con ID 'LicenciaPreviewDiv'.
    document.getElementById('LicenciaFile').addEventListener('change', function (event) {
        previewImage(event, 'LicenciaPreview', 'LicenciaPreviewDiv');
    });

    // 4. document.getElementById('AntecedentesFile').addEventListener('change', function (event) { ... });
    //    Similar a los pasos anteriores, pero para el elemento con el ID 'AntecedentesFile'. La vista
    //    previa del archivo de antecedentes se mostrará en el elemento con ID 'AntecedentesPreview'
    //    dentro del div con ID 'AntecedentesPreviewDiv'.
    document.getElementById('AntecedentesFile').addEventListener('change', function (event) {
        previewImage(event, 'AntecedentesPreview', 'AntecedentesPreviewDiv');
    });

    // 5. function previewImage(event, previewImageId, previewDivId) { ... }
    //    Declara una función llamada 'previewImage' que toma tres argumentos: el objeto del evento
    //    'change', el ID del elemento img donde se mostrará la vista previa y el ID del elemento div
    //    que contiene la vista previa. Esta función se encarga de leer el archivo seleccionado y
    //    mostrarlo como una vista previa en la página.
    function previewImage(event, previewImageId, previewDivId) {
        // 6. const file = event.target.files[0];
        //    Obtiene el primer archivo seleccionado por el usuario desde la propiedad 'files' del
        //    elemento que disparó el evento ('event.target', que en este caso es el input file).
        //    'event.target.files' es una lista de archivos, incluso si el input no tiene el atributo
        //    'multiple', siempre será una lista (con un máximo de un elemento en ese caso).
        const file = event.target.files[0];
        // 7. const preview = document.getElementById(previewDivId);
        //    Selecciona el elemento del DOM que actuará como contenedor de la vista previa usando el ID
        //    proporcionado en 'previewDivId'.
        const preview = document.getElementById(previewDivId);
        // 8. const imagePreview = document.getElementById(previewImageId);
        //    Selecciona el elemento img del DOM donde se mostrará la imagen de vista previa usando el ID
        //    proporcionado en 'previewImageId'.
        const imagePreview = document.getElementById(previewImageId);

        // 9. if (file) { ... } else { ... }
        //    Verifica si se ha seleccionado un archivo (es decir, si 'file' no es null o undefined).
        if (file) {
            // 10. const fileReader = new FileReader();
            //     Crea una nueva instancia del objeto FileReader. FileReader permite a las aplicaciones
            //     web leer el contenido de los archivos (o buffers de datos brutos) almacenados en el
            //     cliente de forma asíncrona.
            const fileReader = new FileReader();

            // 11. fileReader.onload = function (e) { ... };
            //     Define una función que se ejecutará cuando la operación de lectura del FileReader se
            //     haya completado con éxito. El objeto 'e' (para evento) contiene el resultado de la lectura.
            fileReader.onload = function (e) {
                // 12. imagePreview.src = e.target.result;
                //     Asigna el resultado de la lectura del archivo (que es una URL de datos representando
                //     la imagen) a la propiedad 'src' del elemento img de vista previa. Esto hace que la
                //     imagen se muestre en el elemento img.
                imagePreview.src = e.target.result;
                // 13. preview.style.display = 'block';
                //     Establece la propiedad 'display' del estilo del elemento div de vista previa a 'block',
                //     haciéndolo visible si estaba oculto previamente.
                preview.style.display = 'block';
            };

            // 14. fileReader.readAsDataURL(file);
            //     Inicia la lectura del contenido del archivo como una URL de datos (data URL). Una
            //     data URL es un esquema de URL que proporciona una forma de incluir un recurso pequeño
            //     en línea en documentos HTML y CSS. Para imágenes, la URL de datos contendrá la
            //     representación Base64 de la imagen. Cuando la lectura se complete, se disparará el
            //     evento 'onload' del FileReader.
            fileReader.readAsDataURL(file);
        } else {
            // 15. imagePreview.src = '#';
            //     Si no se ha seleccionado ningún archivo (o se ha removido la selección), se establece
            //     la propiedad 'src' del elemento img de vista previa a '#', lo que generalmente hace
            //     que no se muestre ninguna imagen.
            imagePreview.src = '#';
            // 16. preview.style.display = 'none';
            //     Si no se ha seleccionado ningún archivo, se establece la propiedad 'display' del
            //     estilo del elemento div de vista previa a 'none', ocultándolo.
            preview.style.display = 'none';
        }
    }

    // 17. function resetInputFieldAndPreview(inputFileId, previewImageId) { ... }
    //     Declara una función llamada 'resetInputFieldAndPreview' que toma dos argumentos: el ID del
    //     input file y el ID del elemento img de vista previa. Esta función se encarga de resetear
    //     el input file y la vista previa de la imagen.
    function resetInputFieldAndPreview(inputFileId, previewImageId) {
        // 18. resetInputField(inputFileId);
        //     Llama a la función 'resetInputField' (cuyo código no se muestra aquí) para resetear el
        //     valor del input file especificado por 'inputFileId'.
        resetInputField(inputFileId);
        // 19. const previewImage = document.getElementById(previewImageId);
        //     Selecciona el elemento img de vista previa usando el ID proporcionado en 'previewImageId'.
        const previewImage = document.getElementById(previewImageId);
        // 20. const preview = document.getElementById(previewImageId + 'Div');
        //     Selecciona el elemento div que contiene la vista previa. Se asume que el ID de este div
        //     se forma concatenando el ID de la imagen de vista previa con la cadena 'Div'.
        const preview = document.getElementById(previewImageId + 'Div');
        // 21. if (previewImage) { ... }
        //     Verifica si el elemento img de vista previa fue encontrado en el DOM.
        if (previewImage) {
            // 22. previewImage.src = "#";
            //     Establece la propiedad 'src' del elemento img de vista previa a '#', removiendo la
            //     imagen mostrada.
            previewImage.src = "#";
            // 23. preview.style.display = "none";
            //     Establece la propiedad 'display' del estilo del elemento div de vista previa a 'none',
            //     ocultándolo.
            preview.style.display = "none";
        }
    }

    // 1. function resetInputField(inputFileId) { ... }
//    Declara una función llamada 'resetInputField' que toma un argumento: el ID del input file
//    que se desea resetear.
function resetInputField(inputFileId) {
    // 2. const inputFile = document.getElementById(inputFileId);
    //    Selecciona el elemento del DOM con el ID proporcionado en 'inputFileId'. Se espera que
    //    este elemento sea un input de tipo file.
    const inputFile = document.getElementById(inputFileId);
    // 3. if (inputFile) { ... }
    //    Verifica si el elemento input file fue encontrado en el DOM (es decir, si 'inputFile'
    //    no es null).
    if (inputFile) {
        // 4. const tempInputFile = document.createElement("input");
        //    Crea un nuevo elemento input de forma dinámica utilizando el método
        //    document.createElement(). Este nuevo elemento aún no está agregado al DOM.
        const tempInputFile = document.createElement("input");
        // 5. tempInputFile.type = "file";
        //    Establece el atributo 'type' del elemento input recién creado a "file". Esto lo
        //    convierte en un input para la selección de archivos.
        tempInputFile.type = "file";
        // 6. tempInputFile.value = "";
        //    Establece el valor del nuevo input file a una cadena vacía. Un input file no permite
        //    establecer su valor directamente por seguridad, pero se intenta establecerlo en el
        //    elemento temporal.
        tempInputFile.value = "";
        // 7. inputFile.value = tempInputFile.value;
        //    Intenta asignar el valor del nuevo input file (que está vacío) al valor del input
        //    file original. **Nota:** Por razones de seguridad, en muchos navegadores, no se
        //    permite establecer programáticamente el valor de un input file a una cadena vacía de
        //    esta manera. La técnica de reemplazar el elemento es más confiable, pero este código
        //    intenta una asignación directa del valor de un elemento file recién creado.
        inputFile.value = tempInputFile.value;
        // 8. tempInputFile.remove();
        //    Remueve el elemento input file temporal del DOM. Este elemento solo se creó para
        //    intentar obtener un valor vacío para asignar al input file original.
        tempInputFile.remove();
    }
}

// 9. function addReferenteOp() { ... }
//    Declara una función llamada 'addReferenteOp'. Se espera que esta función realice una
//    llamada AJAX para agregar un "referente op" (la funcionalidad específica no está clara
//    sin más contexto).
function addReferenteOp() {
    // 10. $.ajax({ ... });
    //     Utiliza la función 'ajax' de la librería jQuery (indicado por el '$') para realizar
    //     una petición HTTP asíncrona.
    $.ajax({
        // 11. url: 'Url.Action("AddReferenteOp")',
        //     Especifica la URL a la que se enviará la petición AJAX. Se utiliza la sintaxis de
        //     ASP.NET MVC ('Url.Action') para generar la URL de la acción del controlador llamada
        //     "AddReferenteOp". Esto asegura que la URL sea correcta incluso si la estructura de
        //     las rutas de la aplicación cambia.
        url: '@Url.Action("AddReferenteOp")',
        // 12. data: $("#divReferentesOp *[name]").serialize(),
        //     Especifica los datos que se enviarán al servidor.
        //     - $("#divReferentesOp"): Selecciona el elemento del DOM con el ID 'divReferentesOp'
        //       utilizando el selector de jQuery. Se espera que este div contenga los campos del
        //       formulario relacionados con los "referentes op".
        //     - "*[name]": Selecciona todos los elementos dentro del 'divReferentesOp' que tienen
        //       un atributo 'name'. Estos suelen ser los campos de un formulario (input, select, textarea).
        //     - ".serialize()": Convierte los valores de estos campos en una cadena de consulta
        //       (query string) codificada para ser enviada en la petición HTTP (por ejemplo,
        //       'nombre=valor&apellido=otroValor').
        data: $("#divReferentesOp *[name]").serialize(),
        // 13. success: function (html) { ... },
        //     Define una función que se ejecutará si la petición AJAX al servidor se completa
        //     con éxito (es decir, el servidor devuelve una respuesta con un código de estado HTTP
        //     que indica éxito, como 200 OK). El parámetro 'html' contendrá la respuesta del servidor,
        //     que se espera que sea código HTML.
        success: function (html) {
            // 14. $("#divReferentesOp").html(html);
            //     Utiliza jQuery para seleccionar el elemento con el ID 'divReferentesOp' y
            //     reemplaza su contenido HTML con el HTML recibido del servidor en la respuesta AJAX.
            //     Esto sugiere que la acción "AddReferenteOp" en el servidor devuelve el HTML actualizado
            //     para la sección de "referentes op".
            $("#divReferentesOp").html(html);
        }
    });
}

// 15. function deleteReferenteOp(numItem) { ... }
//     Declara una función llamada 'deleteReferenteOp' que toma un argumento 'numItem'. Se espera
//     que esta función realice una llamada AJAX para eliminar un "referente op" específico,
//     identificado por 'numItem'.
function deleteReferenteOp(numItem) {
    // 16. $.ajax({ ... });
    //     Utiliza la función 'ajax' de jQuery para realizar una petición HTTP asíncrona.
    $.ajax({
        // 17. url: 'Url.Action("DeleteReferenteOp")' + "/" + numItem,
        //     Especifica la URL a la que se enviará la petición AJAX para eliminar un referente op.
        //     - 'Url.Action("DeleteReferenteOp")': Genera la URL de la acción del controlador
        //       llamada "DeleteReferenteOp".
        //     - "/" + numItem: Concatena una barra y el valor de 'numItem' a la URL, sugiriendo que
        //       'numItem' se pasa como un parámetro en la ruta para identificar el referente a eliminar.
        url: '@Url.Action("DeleteReferenteOp")' + "/" + numItem,
        // 18. data: $("#divReferentesOp *[name]").serialize(),
        //     Similar a la función 'addReferenteOp', serializa los datos de los campos dentro del
        //     'divReferentesOp' y los envía al servidor con la petición AJAX. Esto podría incluir
        //     otros datos necesarios para la operación de eliminación.
        data: $("#divReferentesOp *[name]").serialize(),
        // 19. success: function (html) { ... },
        //     Define una función que se ejecutará si la petición AJAX al servidor se completa
        //     con éxito. El parámetro 'html' contendrá la respuesta del servidor (se espera que sea HTML).
        success: function (html) {
            // 20. $("#divReferentesOp").html(html);
            //     Reemplaza el contenido HTML del elemento con el ID 'divReferentesOp' con el HTML
            //     recibido del servidor. Esto sugiere que la acción "DeleteReferenteOp" en el
            //     servidor devuelve el HTML actualizado para la sección de "referentes op" después
            //     de la eliminación.
            $("#divReferentesOp").html(html);
        }
    });
}
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}