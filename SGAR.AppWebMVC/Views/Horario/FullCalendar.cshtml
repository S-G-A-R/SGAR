@model SGAR.AppWebMVC.Models.Horario

@{
    ViewData["Title"] = "Calendario de Horarios";
}

<h2 class="text-center"><i class="bi bi-calendar3"></i> @ViewData["Title"]</h2>

@if (User.IsInRole("Alcaldia"))
{
    <a href="@Url.Action("Index", "Horario")" class="btn btn-secondary"><i class="bi bi-arrow-left-short"></i> Volver a la Lista</a>
}

<hr />


<!-- Incluir FullCalendar y jQuery -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css">
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/locales-all.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Contenedor del Calendario -->
<div id="calendar"></div>

<!-- Modal para ver detalles del evento -->
<div class="modal fade" id="eventDetailsModal" tabindex="-1" aria-labelledby="modalTitle" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Detalles del Horario</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img src="~/css/sgarlimp.png" alt="Imagen de bienvenida" style="max-width: 140px; margin-right: 20px;"/>
                <p><strong>Operador:</strong> <span id="modalOperador"></span></p>
                <p><strong>Zona:</strong> <span id="modalZona"></span></p>
                <p><strong>Turno:</strong> <span id="modalTurno"></span></p>
                <p><strong>Hora de Entrada:</strong> <span id="modalHoraEntrada"></span></p>
                <p><strong>Hora de Salida:</strong> <span id="modalHoraSalida"></span></p>
                <p><strong>Días:</strong> <span id="modalDias"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<!-- Script para FullCalendar -->
@section Scripts {
    <script>
        // 1. $(document).ready(function () { ... });
        //    Esta es una función de jQuery que asegura que el código dentro de ella se ejecute solo
        //    después de que el documento HTML ha sido completamente cargado y parseado (el DOM está
        //    listo). Esto es importante para que los elementos del DOM a los que se hace referencia
        //    ya existan.
        $(document).ready(function () {
            // 2. var calendarEl = document.getElementById('calendar');
            //    Selecciona el elemento del DOM con el ID 'calendar' utilizando JavaScript puro y
            //    almacena una referencia a él en la variable 'calendarEl'. Se espera que este elemento
            //    sea un <div> donde se renderizará el calendario de FullCalendar.
            var calendarEl = document.getElementById('calendar');
            // 3. var calendar = new FullCalendar.Calendar(calendarEl, { ... });
            //    Crea una nueva instancia del objeto 'Calendar' de la librería FullCalendar.
            //    - El primer argumento es el elemento del DOM donde se renderizará el calendario ('calendarEl').
            //    - El segundo argumento es un objeto literal que contiene las opciones de configuración
            //      para el calendario.
            var calendar = new FullCalendar.Calendar(calendarEl, {
                // 4. locale: 'es',
                //    Establece el idioma del calendario a español. Esto afectará la visualización de los
                //    nombres de los meses, los días de la semana y otros textos relacionados con la
                //    localización.
                locale: 'es',
                // 5. initialView: 'dayGridMonth',
                //    Define la vista inicial que se mostrará cuando se cargue el calendario. En este caso,
                //    se establece a 'dayGridMonth', que muestra una vista mensual con cuadrículas para cada día.
                initialView: 'dayGridMonth',
                // 6. headerToolbar: { ... },
                //    Configura la barra de herramientas que se muestra en la parte superior del calendario.
                //    Contiene botones para navegar por las fechas y cambiar la vista.
                headerToolbar: {
                    // 7. left: 'prev,next today',
                    //    Define los elementos que se mostrarán en la parte izquierda de la barra de herramientas.
                    //    - 'prev': Botón para ir al período anterior (mes anterior en la vista mensual).
                    //    - 'next': Botón para ir al período siguiente (mes siguiente en la vista mensual).
                    //    - 'today': Botón para volver a la fecha actual.
                    left: 'prev,next today',
                    // 8. center: 'title',
                    //    Define el elemento que se mostrará en el centro de la barra de herramientas.
                    //    - 'title': Muestra el título del período que se está visualizando (por ejemplo,
                    //      "Octubre 2023").
                    center: 'title',
                    // 9. right: 'dayGridMonth,timeGridWeek,timeGridDay'
                    //    Define los elementos que se mostrarán en la parte derecha de la barra de herramientas.
                    //    Estos suelen ser botones para cambiar entre diferentes vistas del calendario.
                    //    - 'dayGridMonth': Botón para mostrar la vista mensual.
                    //    - 'timeGridWeek': Botón para mostrar la vista semanal con franjas horarias.
                    //    - 'timeGridDay': Botón para mostrar la vista diaria con franjas horarias.
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                // 10. buttonText: { ... },
                //     Permite personalizar el texto de los botones de la barra de herramientas y otros
                //     elementos de la interfaz del calendario para el idioma configurado ('es' en este caso).
                buttonText: {
                    // 11. today: 'Hoy',
                    //     Define el texto del botón "hoy".
                    today: 'Hoy',
                    // 12. month: 'Mes',
                    //     Define el texto del botón para la vista mensual.
                    month: 'Mes',
                    // 13. week: 'Semana',
                    //     Define el texto del botón para la vista semanal.
                    week: 'Semana',
                    // 14. day: 'Día',
                    //     Define el texto del botón para la vista diaria.
                    day: 'Día',
                    // 15. list: 'Lista'
                    //     Aunque no está en 'headerToolbar' por defecto, se define el texto para una posible
                    //     vista de lista de eventos.
                    list: 'Lista'
                },
                // 16. events: function (info, successCallback, failureCallback) { ... },
                //     Esta función es una fuente de eventos personalizada. FullCalendar llamará a esta
                //     función cuando necesite obtener los eventos para un cierto período de tiempo
                //     (por ejemplo, cuando se carga el calendario inicialmente o cuando se navega a un
                //     mes diferente).
                //     - 'info': Un objeto que contiene información sobre el período de tiempo que se está
                //       solicitando (start, end, timezone).
                //     - 'successCallback': Una función que debe ser llamada con un array de objetos de
                //       evento cuando los eventos se hayan cargado exitosamente.
                //     - 'failureCallback': Una función que debe ser llamada si hay un error al cargar los
                //       eventos.
                events: function (info, successCallback, failureCallback) {
                    // 17. $.ajax({ ... });
                    //     Realiza una petición HTTP asíncrona utilizando la función 'ajax' de jQuery para
                    //     obtener los datos de los eventos del servidor.
                    $.ajax({
                        // 18. url: '/Horario/GetHorarios',
                        //     Especifica la URL a la que se enviará la petición AJAX. Se espera que esta URL
                        //     corresponda a una acción ('GetHorarios') dentro de un controlador ('Horario')
                        //     en el backend de la aplicación que devolverá los datos de los horarios.
                        url: '/Horario/GetHorarios',
                        // 19. dataType: 'json',
                        //     Indica que se espera que la respuesta del servidor esté en formato JSON.
                        dataType: 'json',
                        // 20. success: function (data) { ... },
                        //     Define una función que se ejecutará si la petición AJAX al servidor se completa
                        //     con éxito (es decir, el servidor devuelve una respuesta con un código de estado
                        //     HTTP que indica éxito, como 200 OK). El parámetro 'data' contendrá la respuesta
                        //     del servidor, que se espera que sea un array de objetos representando los horarios.
                        success: function (data) {
                            // 21. var events = data.map(function (event) { ... });
                            //     Utiliza el método 'map' en el array 'data' para transformar cada objeto de
                            //     horario recibido del servidor en un objeto de evento que FullCalendar puede
                            //     entender.
                            var events = data.map(function (event) {
                                // 22. return { ... };
                                //     Retorna un nuevo objeto que representa un evento para FullCalendar.
                                return {
                                    // 23. id: event.id,
                                    //     Asigna el ID del horario del servidor al ID del evento de FullCalendar.
                                    id: event.id,
                                    // 24. title: event.title,
                                    //     Asigna el título del horario del servidor al título del evento de
                                    //     FullCalendar. Este título se mostrará en el calendario.
                                    title: event.title,
                                    // 25. start: event.start,
                                    //     Asigna la fecha y hora de inicio del horario del servidor al 'start'
                                    //     del evento de FullCalendar. FullCalendar utiliza esta información para
                                    //     posicionar el evento en el calendario.
                                    start: event.start,
                                    // 26. end: event.end,
                                    //     Asigna la fecha y hora de fin del horario del servidor al 'end' del
                                    //     evento de FullCalendar. Si no se proporciona, el evento puede ser
                                    //     tratado como un evento de un solo día o con una duración implícita.
                                    end: event.end,
                                    // 27. extendedProps: { ... }
                                    //     Permite adjuntar datos adicionales al objeto del evento que no son
                                    //     utilizados directamente por FullCalendar para la renderización básica,
                                    //     pero que pueden ser útiles para otras funcionalidades (como mostrar
                                    //     detalles al hacer clic en un evento).
                                    extendedProps: {
                                        // 28. operador: event.operador,
                                        //     Almacena el operador asociado al horario.
                                        operador: event.operador,
                                        // 29. zona: event.zona,
                                        //     Almacena la zona asociada al horario.
                                        zona: event.zona,
                                        // 30. turno: event.turno,
                                        //     Almacena el turno asociado al horario.
                                        turno: event.turno,
                                        // 31. horaEntrada: event.horaEntrada,
                                        //     Almacena la hora de entrada del horario.
                                        horaEntrada: event.horaEntrada,
                                        // 32. horaSalida: event.horaSalida,
                                        //     Almacena la hora de salida del horario.
                                        horaSalida: event.horaSalida,
                                        // 33. dias: event.dia
                                        //     **Nota:** La propiedad en el servidor parece ser 'dia' (singular),
                                        //     pero aquí se almacena bajo la clave 'dias' (plural). Esto podría
                                        //     ser un error tipográfico o una intención de manejar múltiples días
                                        //     en el futuro.
                                        dias: event.dia
                                    }
                                };
                            });
                            // 34. console.log("Eventos recibidos:", events);
                            //     Imprime en la consola del navegador el array de eventos formateados que se
                            //     enviarán a FullCalendar. Esto es útil para depurar y verificar que los datos
                            //     del servidor se estén transformando correctamente.
                            console.log("Eventos recibidos:", events);
                            // 35. successCallback(events);
                            //     Llama a la función 'successCallback' proporcionada por FullCalendar,
                            //     pasándole el array de eventos formateados. Esto le indica a FullCalendar
                            //     que los eventos se han cargado exitosamente y que puede proceder a
                            //     renderizarlos en el calendario.
                            successCallback(events);
                        },
                        // 36. error: function () { ... }
                        //     Define una función que se ejecutará si la petición AJAX al servidor falla
                        //     (por ejemplo, si hay un error de red o si el servidor devuelve un código de
                        //     estado HTTP que indica un error).
                        error: function () {
                            // 37. failureCallback();
                            //     Llama a la función 'failureCallback' proporcionada por FullCalendar para
                            //     indicar que la carga de eventos ha fallado. FullCalendar puede tener un
                            //     comportamiento predeterminado para manejar esta situación (por ejemplo,
                            //     mostrar un mensaje de error).
                            failureCallback();
                        }
                    });
                },
                // 38. eventClick: function (info) { ... }
                //     Define una función que se ejecutará cuando se hace clic en un evento del calendario.
                //     El argumento 'info' es un objeto que contiene información sobre el evento que se
                //     hizo clic.
                eventClick: function (info) {
                    // 39. var event = info.event;
                    //     Obtiene el objeto del evento de FullCalendar al que se hizo clic y lo almacena
                    //     en la variable 'event'.
                    var event = info.event;
                    // 40. $('#modalOperador').text(event.extendedProps.operador || 'No asignado');
                    //     Utiliza jQuery para seleccionar el elemento con el ID 'modalOperador' (se espera
                    //     que sea un elemento HTML donde se mostrará el nombre del operador en un modal)
                    //     y establece su texto al valor de la propiedad 'operador' dentro de 'extendedProps'
                    //     del objeto del evento. Si esta propiedad no existe o está vacía, se mostrará el
                    //     texto 'No asignado' como valor predeterminado (esto es lo que hace el operador '||').
                    $('#modalOperador').text(event.extendedProps.operador || 'No asignado');
                    // 41. $('#modalZona').text(event.extendedProps.zona || 'No asignada');
                    //     Similar al paso 40, pero para el elemento con el ID 'modalZona', mostrando la zona
                    //     asociada al evento o 'No asignada' si no hay información.
                    $('#modalZona').text(event.extendedProps.zona || 'No asignada');
                    // 42. $('#modalTurno').text(event.extendedProps.turno || 'No asignado');
                    //     Similar al paso 40, pero para el elemento con el ID 'modalTurno', mostrando el turno
                    //     asociado al evento o 'No asignado' si no hay información.
                    $('#modalTurno').text(event.extendedProps.turno || 'No asignado');
                    // 43. $('#modalHoraEntrada').text(event.extendedProps.horaEntrada || 'No especificada');
                    //     Similar al paso 40, pero para el elemento con el ID 'modalHoraEntrada', mostrando
                    //     la hora de entrada del evento o 'No especificada' si no hay información.
                    $('#modalHoraEntrada').text(event.extendedProps.horaEntrada || 'No especificada');
                    // 44. $('#modalHoraSalida').text(event.extendedProps.horaSalida || 'No especificada');
                    //     Similar al paso 40, pero para el elemento con el ID 'modalHoraSalida', mostrando
                    //     la hora de salida del evento o 'No especificada' si no hay información.
                    $('#modalHoraSalida').text(event.extendedProps.horaSalida || 'No especificada');
                    // 45. $('#modalDias').text(event.extendedProps.dias || 'No especificado');
                    //     Similar al paso 40, pero para el elemento con el ID 'modalDias', mostrando los días
                    //     asociados al evento o 'No especificado' si no hay información.
                    $('#modalDias').text(event.extendedProps.dias || 'No especificado');

                    // 46. $('#eventDetailsModal').modal('show');
                    //     Utiliza jQuery para seleccionar el elemento con el ID 'eventDetailsModal' (se espera
                    //     que sea un modal de Bootstrap) y llama al método 'modal('show')' para hacerlo
                    //     visible al usuario. De esta manera, al hacer clic en un evento del calendario, se
                    //     muestra un modal con los detalles del evento (operador, zona, turno, etc.).
                    $('#eventDetailsModal').modal('show');
                }
            });

            // 47. calendar.render();
            //     Llama al método 'render' del objeto 'calendar' para inicializar y mostrar el calendario
            //     en el elemento del DOM especificado ('calendarEl'). Hasta que se llama a este método,
            //     el calendario no se mostrará.
            calendar.render();
        });
    </script>
}
