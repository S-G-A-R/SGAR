@model IEnumerable<SGAR.AppWebMVC.Models.Alcaldia>

@{
    ViewData["Title"] = "Lista de alcaldias";
}

<h1><i class="bi bi-card-list me-3"></i>@ViewData["Title"]</h1>

<form asp-action="List" class="mb-3">

    <div class="row">
        <div class="col-6">
            <div class="form-group">
                <label class="control-label">Departamento</label>
                <select id="departamentoId" class="form-control" asp-items="ViewBag.DepartamentoId"></select>
            </div>
        </div>
        <div class="col-6">
            <div class="form-group">
                <label class="control-label">Municipio</label>
                <select id="municipios" name="idMunicipio" class="form-control" asp-items="ViewBag.MunicipioId"></select>
            </div>
        </div>

        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label class="control-label">Cant. Registros</label>
                    <select name="topRegistry" class="form-control">
                        <option selected value="10">10</option>
                        <option value="20">20</option>
                        <option value="60">60</option>
                        <option value="100">100</option>
                        <option value="500">500</option>
                        <option value="1000">1000</option>
                        <option value="0">Todos</option>
                    </select>
                </div>
            </div>

        </div>

    </div>
    <div class="row mt-3">
        <div class="col-12">
            <input type="submit" value="Buscar" class="btn btn-primary" />
            <a class="btn btn-success" asp-action="Create"><i class="bi bi-plus-circle-fill"></i></a>
        </div>
    </div>
</form>
<div class="row">
    <div class="col-10 mx-auto">
        <table class="table table-striped mt-4 shadow" id="myTable">
            <thead class="table-dark">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Correo)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.IdMunicipioNavigation)
                    </th>

                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Correo)
                        </td>
                        <td>
                            @{
                                var municipios = ((SelectList)ViewBag.AlcaldiaId);
                                var municipio = municipios.FirstOrDefault(s => s.Value == item.IdMunicipio.ToString());
                                @municipio.Text
                            }
                        </td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning"><i class="bi bi-pencil-square"></i></a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info"><i class="bi bi-info-square-fill"></i></a>
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger"><i class="bi bi-trash-fill"></i></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@section Scripts {
    <script>
       // 1. $(document).ready(function () { ... });
//    Esta es una función de jQuery que asegura que el código dentro de ella se ejecute solo
//    después de que el documento HTML ha sido completamente cargado y parseado (el DOM está
//    listo). Esto es importante para que los elementos del DOM a los que se hace referencia
//    ya existan.
$(document).ready(function () {

    // 2. $('#myTable').DataTable({ ... });
    //    Selecciona el elemento del DOM con el ID 'myTable' (se espera que sea una tabla HTML
    //    <table>) utilizando jQuery y lo inicializa como una DataTable. DataTables es un plugin
    //    de jQuery que añade funcionalidades avanzadas a las tablas HTML, como paginación,
    //    ordenación, filtrado, etc. El objeto literal dentro de los paréntesis contiene las
    //    opciones de configuración para la DataTable.
    $('#myTable').DataTable({
        // 3. "language": languageTable,
        //    Configura el idioma de la DataTable utilizando una variable llamada 'languageTable'.
        //    Se espera que esta variable sea un objeto JavaScript que contiene las traducciones
        //    para las etiquetas y mensajes que muestra la DataTable (por ejemplo, "Mostrar _MENU_
        //    registros", "Buscar:", "Siguiente", "Anterior", etc.).
        "language": languageTable,
        // 4. ordering: false
        //    Deshabilita la funcionalidad de ordenación de las columnas de la tabla. Si esta
        //    opción se establece en 'true' (o se omite, ya que es el valor por defecto), los
        //    usuarios podrían hacer clic en los encabezados de las columnas para ordenar los datos.
        ordering: false
    });
});

// 5. $("#departamentoId").change(function () { ... });
//    Selecciona el elemento del DOM con el ID 'departamentoId' (se espera que sea un elemento
//    de selección <select>) utilizando jQuery. Luego, se adjunta un "manejador de eventos"
//    (event handler) para el evento 'change'. Este evento se dispara cuando el valor del
//    elemento de selección cambia (es decir, cuando el usuario selecciona una opción diferente
//    en el desplegable de departamentos). La función anónima proporcionada como argumento se
//    ejecutará cuando ocurra este evento.
$("#departamentoId").change(function () {
    // 6. getMunicipiosFromDepartamentoId();
    //    Dentro del manejador del evento 'change' para el departamento, se llama a la función
    //    'getMunicipiosFromDepartamentoId' (definida más adelante). Se espera que esta función
    //    realice una llamada AJAX al servidor para obtener la lista de municipios correspondientes
    //    al departamento seleccionado y actualizar el desplegable de municipios.
    getMunicipiosFromDepartamentoId();
});

// 7. var getMunicipiosFromDepartamentoId = function () { ... };
//    Declara una variable llamada 'getMunicipiosFromDepartamentoId' y le asigna una función anónima.
//    Esta función se encarga de realizar la llamada AJAX para obtener los municipios basados en
//    el departamento seleccionado.
var getMunicipiosFromDepartamentoId = function () {
    // 8. $.ajax({ ... });
    //    Utiliza la función 'ajax' de la librería jQuery (indicado por '$') para realizar una
    //    petición HTTP asíncrona.
    $.ajax({
        // 9. url: 'Url.Action("GetMunicipiosFromDepartamentoId", "Zona")',
        //    Especifica la URL a la que se enviará la petición AJAX. Se utiliza la sintaxis de
        //    ASP.NET MVC ('Url.Action') para generar la URL de la acción del controlador llamada
        //    "GetMunicipiosFromDepartamentoId" dentro del controlador llamado "Zona". Esto asegura
        //    que la URL sea correcta incluso si la estructura de las rutas de la aplicación cambia.
        url: '@Url.Action("GetMunicipiosFromDepartamentoId", "Zona")',
        // 10. type: 'GET',
        //     Especifica el tipo de petición HTTP que se realizará, en este caso, una petición GET.
        //     Las peticiones GET se utilizan comúnmente para solicitar datos al servidor.
        type: 'GET',
        // 11. data: { departamentoId: $('#departamentoId').val(), },
        //     Especifica los datos que se enviarán al servidor con la petición GET. Se envían como
        //     un objeto JavaScript que jQuery convertirá en parámetros en la URL (query string).
        //     - departamentoId: $('#departamentoId').val(): Obtiene el valor seleccionado en el
        //       elemento con el ID 'departamentoId' (el desplegable de departamentos) utilizando
        //       jQuery y lo envía al servidor bajo el nombre del parámetro 'departamentoId'.
        data: {
            departamentoId: $('#departamentoId').val(),
        },
        // 12. success: function (data) { ... },
        //     Define una función que se ejecutará si la petición AJAX al servidor se completa
        //     con éxito (es decir, el servidor devuelve una respuesta con un código de estado HTTP
        //     que indica éxito, como 200 OK). El parámetro 'data' contendrá la respuesta del servidor,
        //     que se espera que sea una lista de municipios (probablemente en formato JSON).
        success: function (data) {
            // 13. $('#municipios').find('option').remove();
            //     Selecciona el elemento del DOM con el ID 'municipios' (se espera que sea un
            //     desplegable <select> de municipios) utilizando jQuery, encuentra todos los
            //     elementos <option> dentro de él y los elimina. Esto se hace para limpiar la lista
            //     de municipios antes de agregar los nuevos correspondientes al departamento
            //     seleccionado. **Nota:** En el comentario anterior, el ID del desplegable de
            //     municipios era 'municipioId', aquí es 'municipios'. Asegúrate de que el ID en tu
            //     HTML sea consistente.
            $('#municipios').find('option').remove();
            // 14. $('#municipios').append('<option value="0">SELECCIONAR</option>');
            //     Agrega una nueva opción al principio del desplegable de municipios. Esta opción
            //     tiene el valor "0" y el texto "SELECCIONAR", que generalmente se utiliza como una
            //     opción por defecto o un marcador de posición para indicar que el usuario debe
            //     seleccionar un municipio. **Nota:** Similar al paso anterior, el ID usado aquí es
            //     'municipios'.
            $('#municipios').append('<option value="0">SELECCIONAR</option>');
            // 15. $(data).each(function (i, item) { ... });
            //     Utiliza la función 'each' de jQuery para iterar sobre la lista de municipios
            //     recibida del servidor en la variable 'data'. Para cada elemento de la lista:
            //     - 'i' es el índice del elemento en la lista.
            //     - 'item' es el objeto que representa un municipio. Se espera que cada municipio
            //       tenga propiedades como 'id' y 'nombre'.
            $(data).each(
                function (i, item) {
                    // 16. $('#municipios').append('<option value="' + item.id + '">' + item.nombre + '</option>');
                    //     Para cada objeto 'item' (municipio) en la lista 'data', se crea un nuevo
                    //     elemento <option> para el desplegable de municipios ('#municipios'). El
                    //     valor de la opción se establece al 'id' del municipio y el texto visible
                    //     de la opción se establece al 'nombre' del municipio. Esta nueva opción se
                    //     agrega al final del desplegable de municipios. **Nota:** El ID usado aquí es
                    //     'municipios'.
                    $('#municipios').append('<option value="' + item.id + '">' + item.nombre + '</option>');
                }
            );
        }
    });
};


    </script>
}
