@model SGAR.AppWebMVC.Models.Alcaldia

@{
    ViewData["Title"] = "Editar Alcaldia";
}

<h1><i class="bi bi-pen me-3"></i>@ViewData["Title"]</h1>
<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="row">
                <div class="col-6">
                    <div class="form-group">
                        <label class="control-label required">Departamento</label>
                        <select id="departamentoId" class="form-control combo" asp-items="ViewBag.DepartamentoId"></select>
                    </div>
                </div>
                <div class="col-6">
                    <div class="form-group">
                        <label class="control-label required">Municipio</label>
                        <select id="municipioId" asp-for="IdMunicipio" class="form-control combo" asp-items="ViewBag.MunicipioId"></select>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group col-6">
                    <label asp-for="Correo" class="control-label required"></label>
                    <input asp-for="Correo" class="form-control" />
                    <span asp-validation-for="Correo" class="text-danger"></span>
                </div>
            </div>
            
            <div class="row mt-2">
                <div class="form-group col-1">
                    <input type="submit" value="Guardar" class="btn btn-success" />
                </div>
                <div class="col-1">
                    <a asp-action="List" class="btn btn-info"><i class="bi bi-arrow-90deg-left me-1"></i> Volver</a>
                </div>
            </div>
        </form>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

<script>
// 1. $("#departamentoId").change(function () { ... });
//    Selecciona el elemento del DOM con el ID 'departamentoId' (se espera que sea un elemento
//    de selección <select>) utilizando jQuery. Luego, se adjunta un "manejador de eventos"
//    (event handler) para el evento 'change'. Este evento se dispara cuando el valor del
//    elemento de selección cambia (es decir, cuando el usuario selecciona una opción diferente
//    en el desplegable de departamentos). La función anónima proporcionada como argumento se
//    ejecutará cuando ocurra este evento.
$("#departamentoId").change(function () {
    // 2. getMunicipiosFromDepartamentoId();
    //    Dentro del manejador del evento 'change' para el departamento, se llama a la función
    //    'getMunicipiosFromDepartamentoId' (definida más adelante). Se espera que esta función
    //    realice una llamada AJAX al servidor para obtener la lista de municipios correspondientes
    //    al departamento seleccionado y actualizar el desplegable de municipios.
    getMunicipiosFromDepartamentoId();
});

// 3. var getMunicipiosFromDepartamentoId = function () { ... };
//    Declara una variable llamada 'getMunicipiosFromDepartamentoId' y le asigna una función anónima.
//    Esta función se encarga de realizar la llamada AJAX para obtener los municipios basados en
//    el departamento seleccionado.
var getMunicipiosFromDepartamentoId = function () {
    // 4. $.ajax({ ... });
    //    Utiliza la función 'ajax' de la librería jQuery (indicado por '$') para realizar una
    //    petición HTTP asíncrona.
    $.ajax({
        // 5. url: '@Url.Action("GetMunicipiosFromDepartamentoId", "Zona")',
        //    Especifica la URL a la que se enviará la petición AJAX. Se utiliza la sintaxis de
        //    ASP.NET MVC (@Url.Action') para generar la URL de la acción del controlador llamada
        //    "GetMunicipiosFromDepartamentoId" dentro del controlador llamado "Zona". Esto asegura
        //    que la URL sea correcta incluso si la estructura de las rutas de la aplicación cambia.
        url: '@Url.Action("GetMunicipiosFromDepartamentoId", "Zona")',
        // 6. type: 'GET',
        //    Especifica el tipo de petición HTTP que se realizará, en este caso, una petición GET.
        //    Las peticiones GET se utilizan comúnmente para solicitar datos al servidor.
        type: 'GET',
        // 7. data: { departamentoId: $('#departamentoId').val(), },
        //    Especifica los datos que se enviarán al servidor con la petición GET. Se envían como
        //    un objeto JavaScript que jQuery convertirá en parámetros en la URL (query string).
        //    - departamentoId: $('#departamentoId').val(): Obtiene el valor seleccionado en el
        //      elemento con el ID 'departamentoId' (el desplegable de departamentos) utilizando
        //      jQuery y lo envía al servidor bajo el nombre del parámetro 'departamentoId'.
        data: {
            departamentoId: $('#departamentoId').val(),
        },
        // 8. success: function (data) { ... },
        //    Define una función que se ejecutará si la petición AJAX al servidor se completa
        //    con éxito (es decir, el servidor devuelve una respuesta con un código de estado HTTP
        //    que indica éxito, como 200 OK). El parámetro 'data' contendrá la respuesta del servidor,
        //    que se espera que sea una lista de municipios (probablemente en formato JSON).
        success: function (data) {
            // 9. $('#municipioId').find('option').remove();
            //    Selecciona el elemento del DOM con el ID 'municipioId' (se espera que sea un
            //    desplegable <select> de municipios) utilizando jQuery, encuentra todos los
            //    elementos <option> dentro de él y los elimina. Esto se hace para limpiar la lista
            //    de municipios antes de agregar los nuevos correspondientes al departamento
            //    seleccionado.
            $('#municipioId').find('option').remove();
            // 10. $('#municipioId').append('<option value="0">SELECCIONAR</option>');
            //     Agrega una nueva opción al principio del desplegable de municipios. Esta opción
            //     tiene el valor "0" y el texto "SELECCIONAR", que generalmente se utiliza como una
            //     opción por defecto o un marcador de posición para indicar que el usuario debe
            //     seleccionar un municipio.
            $('#municipioId').append('<option value="0">SELECCIONAR</option>');
            // 11. $(data).each(function (i, item) { ... });
            //     Utiliza la función 'each' de jQuery para iterar sobre la lista de municipios
            //     recibida del servidor en la variable 'data'. Para cada elemento de la lista:
            //     - 'i' es el índice del elemento en la lista.
            //     - 'item' es el objeto que representa un municipio. Se espera que cada municipio
            //       tenga propiedades como 'id' y 'nombre'.
            $(data).each(
                function (i, item) {
                    // 12. $('#municipioId').append('<option value="' + item.id + '">' + item.nombre + '</option>');
                    //     Para cada objeto 'item' (municipio) en la lista 'data', se crea un nuevo
                    //     elemento <option> para el desplegable de municipios ('#municipioId'). El
                    //     valor de la opción se establece al 'id' del municipio y el texto visible
                    //     de la opción se establece al 'nombre' del municipio. Esta nueva opción se
                    //     agrega al final del desplegable de municipios.
                    $('#municipioId').append('<option value="' + item.id + '">' + item.nombre + '</option>');
                }
            );
        }
    });
};

</script>
}
