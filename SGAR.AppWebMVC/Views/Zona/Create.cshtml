@model SGAR.AppWebMVC.Models.Zona

@{
    ViewData["Title"] = "Crear Zona";
}

<h1><i class="bi bi-ticket-perforated me-3"></i> @ViewData["Title"]</h1>
<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            
            <div class="row">
                <div class="form-group col-12">
                    <label asp-for="Nombre" class="control-label required"></label>
                    <input asp-for="Nombre" class="form-control" autocomplete="off" />
                    <span asp-validation-for="Nombre" class="text-danger"></span>
                </div>
                <div class="col-4">
                    <div class="form-group">
                        <label class="control-label required">Departamento</label>
                        <select id="departamentoId" class="form-control combo" asp-items="ViewBag.DepartamentoId"></select>
                    </div>
                </div>
                <div class="col-4">
                    <div class="form-group">
                        <label class="control-label required">Municipio</label>
                        <select id="municipioId" asp-for="IdAlcaldia" class="form-control combo" asp-items="ViewBag.MunicipioId"></select>
                    </div>
                </div>
                <div class="col-4">
                    <div class="form-group">
                        <label class="control-label required">Distrito</label>
                        <select id="distritos" asp-for="IdDistrito" class="form-control combo" asp-items="ViewBag.DistritoId"></select>
                    </div>
                </div>
                <div class="form-group col-6">
                    <label asp-for="Descripcion" class="control-label"></label>
                    <input asp-for="Descripcion" class="form-control combo" autocomplete="off"/>
                    <span asp-validation-for="Descripcion" class="text-danger"></span>
                </div>
            </div>

            
            <div class="row mt-2">
                <div class="form-group col-1">
                    <input type="submit" value="Crear" class="btn btn-success" />
                </div>
                <div class="col-1">
                    <a asp-action="Index" class="btn btn-info"><i class="bi bi-arrow-90deg-left"></i> Volver</a>
                </div>
            </div>
        </form>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

<script>
   // 1. $("#departamentoId").change(function () { ... });
//    Selecciona el elemento del DOM con el ID 'departamentoId' (se espera que sea un elemento
//    de formulario como un <select>) y le agrega un "escuchador de eventos" para el evento 'change'.
//    Este evento se dispara cuando el valor del elemento ha sido cambiado por el usuario.
$("#departamentoId").change(function () {
    // 2. getMunicipiosFromDepartamentoId();
    //    Dentro de la función que se ejecuta al cambiar el valor del elemento 'departamentoId',
    //    se llama a la función 'getMunicipiosFromDepartamentoId'. Se espera que esta función
    //    realice una llamada AJAX al servidor para obtener la lista de municipios correspondientes
    //    al departamento seleccionado.
    getMunicipiosFromDepartamentoId();
})

// 3. $("#municipioId").change(function () { ... });
//    Selecciona el elemento del DOM con el ID 'municipioId' (se espera que sea un elemento
//    de formulario <select>) y le agrega un "escuchador de eventos" para el evento 'change'.
$("#municipioId").change(function () {
    // 4. getDistritosFromMunicipioId();
    //    Dentro de la función que se ejecuta al cambiar el valor del elemento 'municipioId',
    //    se llama a la función 'getDistritosFromMunicipioId'. Se espera que esta función realice
    //    una llamada AJAX al servidor para obtener la lista de distritos correspondientes al
    //    municipio seleccionado.
    getDistritosFromMunicipioId();
})

// 5. var getMunicipiosFromDepartamentoId = function () { ... };
//    Declara una función JavaScript llamada 'getMunicipiosFromDepartamentoId'. Esta función
//    se encarga de realizar la llamada AJAX para obtener los municipios.
var getMunicipiosFromDepartamentoId = function () {
    // 6. $.ajax({ ... });
    //    Utiliza la función 'ajax' de la librería jQuery para realizar una petición HTTP asíncrona.
    $.ajax({
        // 7. url: '@Url.Action("GetMunicipiosFromDepartamentoId", "Zona")',
        //    Especifica la URL a la que se enviará la petición AJAX. Se utiliza la sintaxis de
        //    ASP.NET MVC ('Url.Action') para generar la URL de la acción del controlador llamada
        //    "GetMunicipiosFromDepartamentoId" dentro del controlador llamado "Zona". Esto asegura
        //    que la URL sea correcta incluso si la estructura de las rutas de la aplicación cambia.
        url: '@Url.Action("GetMunicipiosFromDepartamentoId", "Zona")',
        // 8. type: 'GET',
        //     Especifica el tipo de petición HTTP que se realizará, en este caso, una petición GET.
        type: 'GET',
        // 9. data: { departamentoId: $('#departamentoId').val(), },
        //     Especifica los datos que se enviarán al servidor con la petición GET. Se envían como
        //     un objeto JavaScript que jQuery convertirá en parámetros en la URL (query string).
        //     - departamentoId: $('#departamentoId').val(): Obtiene el valor seleccionado actualmente
        //       en el elemento del DOM con el ID 'departamentoId' y lo envía al servidor bajo el
        //       nombre del parámetro 'departamentoId'.
        data: {
            departamentoId: $('#departamentoId').val(),
        },
        // 10. success: function (data) { ... },
        //     Define una función que se ejecutará si la petición AJAX al servidor se completa
        //     con éxito (es decir, el servidor devuelve una respuesta con un código de estado HTTP
        //     que indica éxito, como 200 OK). El parámetro 'data' contendrá la respuesta del servidor,
        //     que se espera que sea un array de objetos representando los municipios.
        success: function (data) {
            // 11. $('#municipioId').find('option').remove();
            //     Selecciona el elemento del DOM con el ID 'municipioId' (el dropdown de municipios),
            //     busca todos sus elementos <option> y los elimina. Esto se hace para limpiar la lista
            //     de municipios antes de agregar los nuevos que corresponden al departamento seleccionado.
            $('#municipioId').find('option').remove()
            // 12. $('#municipioId').append('<option value="0">SELECCIONAR</option>');
            //     Agrega una nueva opción al dropdown de municipios con el valor "0" y el texto
            //     "SELECCIONAR". Esta suele ser una opción por defecto para indicar que aún no se ha
            //     seleccionado ningún municipio.
            $('#municipioId').append('<option value="0">SELECCIONAR</option>')
            // 13. $('#distritos').find('option').remove();
            //     Similar al paso 11, limpia la lista de opciones del dropdown de distritos (elemento
            //     con el ID 'distritos'). Esto se hace porque al cambiar el departamento, la lista de
            //     distritos ya no es válida hasta que se seleccione un nuevo municipio.
            $('#distritos').find('option').remove()
            // 14. $('#distritos').append('<option value="0">SELECCIONAR</option>');
            //     Agrega la opción por defecto "SELECCIONAR" al dropdown de distritos.
            $('#distritos').append('<option value="0">SELECCIONAR</option>')
            // 15. $(data).each(function (i, item) { ... });
            //     Itera sobre cada elemento del array 'data' recibido del servidor. Se espera que cada
            //     'item' sea un objeto JavaScript que represente un municipio y tenga propiedades como
            //     'id' y 'nombre'.
            $(data).each(
                function (i, item) {
                    // 16. $('#municipioId').append('<option value="'+ item.id +'">' + item.nombre + '</option>');
                    //     Por cada municipio en el array 'data', se crea un nuevo elemento <option> para
                    //     el dropdown de municipios. El valor de la opción se establece con la propiedad
                    //     'id' del municipio, y el texto visible de la opción se establece con la propiedad
                    //     'nombre' del municipio. Este nuevo <option> se agrega al final del dropdown
                    //     'municipioId'.
                    $('#municipioId').append('<option value="'+ item.id +'">' + item.nombre + '</option>')
                }
            )
        }
    })
}

// 17. var getDistritosFromMunicipioId = function () { ... };
//     Declara una función JavaScript llamada 'getDistritosFromMunicipioId'. Esta función se
//     encarga de realizar la llamada AJAX para obtener los distritos. Su estructura es muy similar
//     a 'getMunicipiosFromDepartamentoId'.
var getDistritosFromMunicipioId = function () {
    // 18. $.ajax({ ... });
    //     Utiliza la función 'ajax' de jQuery para realizar una petición HTTP asíncrona.
    $.ajax({
        // 19. url: '@Url.Action("GetDistritosFromMunicipioId", "Zona")',
        //     Especifica la URL para obtener los distritos, apuntando a la acción
        //     "GetDistritosFromMunicipioId" del controlador "Zona".
        url: '@Url.Action("GetDistritosFromMunicipioId", "Zona")',
        // 20. type: 'GET',
        //     Realiza una petición HTTP GET.
        type: 'GET',
        // 21. data: { municipioId: $('#municipioId').val(), },
        //     Envía el ID del municipio seleccionado (obtenido del elemento con ID 'municipioId')
        //     al servidor como parámetro 'municipioId'.
        data: {
            municipioId: $('#municipioId').val(),
        },
        // 22. success: function (data) { ... },
        //     Función que se ejecuta si la petición AJAX es exitosa. 'data' contiene la lista de
        //     distritos devuelta por el servidor.
        success: function (data) {
            // 23. $('#distritos').find('option').remove();
            //     Limpia la lista de opciones del dropdown de distritos.
            $('#distritos').find('option').remove()
            // 24. $('#distritos').append('<option value="0">SELECCIONAR</option>');
            //     Agrega la opción por defecto "SELECCIONAR" al dropdown de distritos.
            $('#distritos').append('<option value="0">SELECCIONAR</option>')
            // 25. $(data).each(function (i, item) { ... });
            //     Itera sobre la lista de distritos recibida del servidor.
            $(data).each(
                function (i, item) {
                    // 26. $('#distritos').append('<option value="'+ item.id +'">' + item.nombre + '</option>');
                    //     Por cada distrito, crea una nueva opción en el dropdown de distritos con el
                    //     ID del distrito como valor y el nombre del distrito como texto visible.
                    $('#distritos').append('<option value="'+ item.id +'">' + item.nombre + '</option>')
                }
            )
        }
    })
}
</script>
}
