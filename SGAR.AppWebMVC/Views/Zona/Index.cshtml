@model IEnumerable<SGAR.AppWebMVC.Models.Zona>

@{
    ViewData["Title"] = "Lista de zonas";
}

<h1><i class="bi bi-card-list me-3"></i>@ViewData["Title"]</h1>

<form asp-action="Index" class="mb-3">

    <div class="row">
        <div class="col-4">
            <div class="form-group">
                <label class="control-label">Departamento</label>
                <select id="departamentoId" class="form-control" asp-items="ViewBag.DepartamentoId"></select>
            </div>
        </div>
        <div class="col-4">
            <div class="form-group">
                <label class="control-label">Municipio</label>
                <select id="municipioId" class="form-control" asp-items="ViewBag.MunicipioId"></select>
            </div>
        </div>
        <div class="col-4">
            <div class="form-group">
                <label class="control-label">Distrito</label>
                <select id="distritos" name="idDistrito" class="form-control" asp-items="ViewBag.DistritoId"></select>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <div class="form-group">
                    <label class="control-label">Cant. Registros</label>
                    <select name="topRegistro" class="form-control">
                        <option selected value="10">10</option>
                        <option value="20">20</option>
                        <option value="60">60</option>
                        <option value="100">100</option>
                        <option value="500">500</option>
                        <option value="1000">1000</option>
                        <option value="0">Todos</option>
                    </select>
                </div>
            </div>

        </div>

    </div>
    <div class="row mt-3">
        <div class="col-12">
            <input type="submit" value="Buscar" class="btn btn-primary" />
            <a class="btn btn-success" asp-action="Create"><i class="bi bi-plus-circle-fill"></i></a>
        </div>
    </div>
</form>
<div class="row">
    <div class="col-10 mx-auto">
        <table class="table table-striped mt-4 shadow" id="myTable">
            <thead class="table-dark">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Nombre)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.IdAlcaldiaNavigation)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.IdDistritoNavigation)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Nombre)
                        </td>
                        <td>
                            @{
                                var municipios = ((SelectList)ViewBag.AlcaldiaId);
                                var municipio = municipios.FirstOrDefault(s => s.Value == item.IdAlcaldiaNavigation.IdMunicipio.ToString());
                                @municipio.Text
                            }
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.IdDistritoNavigation.Nombre)

                        </td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning"><i class="bi bi-pencil-square"></i></a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info"><i class="bi bi-info-square-fill"></i></a>
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger"><i class="bi bi-trash-fill"></i></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@section Scripts {
    <script>
       // 1. $(document).ready(function () { ... });
//    Esta es una función de jQuery que se ejecuta una vez que el DOM (Document Object Model)
//    ha sido completamente cargado y está listo para ser manipulado. Todo el código dentro de
//    esta función se asegura de que los elementos del HTML existan antes de intentar interactuar con ellos.
$(document).ready(function () {
    // 2. $('#myTable').DataTable({ "language": languageTable });
    //    Selecciona el elemento del DOM con el ID 'myTable' (se espera que sea una tabla HTML)
    //    y lo inicializa como una DataTable utilizando el plugin de jQuery DataTables.
    //    - $('#myTable'): Selector de jQuery que obtiene el elemento con el ID 'myTable'.
    //    - .DataTable({ ... }): Llama a la función DataTable() para convertir la tabla en una
    //      tabla con funcionalidades avanzadas como paginación, ordenamiento, filtrado, etc.
    //    - "language": languageTable: Pasa un objeto JavaScript llamado 'languageTable' como
    //      opción de configuración para la DataTable. Se espera que este objeto contenga las
    //      traducciones o personalizaciones de los textos que muestra la DataTable (por ejemplo,
    //      los mensajes de paginación, los encabezados de las columnas de ordenamiento, etc.).
    $('#myTable').DataTable({
        "language": languageTable
    });
});

// 3. $("#departamentoId").change(function () { ... });
//    Selecciona el elemento del DOM con el ID 'departamentoId' (se espera que sea un elemento
//    de formulario como un <select>) y le agrega un "escuchador de eventos" para el evento 'change'.
//    Este evento se dispara cuando el valor del elemento ha sido cambiado por el usuario.
$("#departamentoId").change(function () {
    // 4. getMunicipiosFromDepartamentoId();
    //    Dentro de la función que se ejecuta al cambiar el valor del elemento 'departamentoId',
    //    se llama a la función 'getMunicipiosFromDepartamentoId'. Se espera que esta función
    //    realice una llamada AJAX al servidor para obtener la lista de municipios correspondientes
    //    al departamento seleccionado.
    getMunicipiosFromDepartamentoId();
})

// 5. $("#municipioId").change(function () { ... });
//    Selecciona el elemento del DOM con el ID 'municipioId' (se espera que sea un elemento
//    de formulario <select>) y le agrega un "escuchador de eventos" para el evento 'change'.
$("#municipioId").change(function () {
    // 6. getDistritosFromMunicipioId();
    //    Dentro de la función que se ejecuta al cambiar el valor del elemento 'municipioId',
    //    se llama a la función 'getDistritosFromMunicipioId'. Se espera que esta función realice
    //    una llamada AJAX al servidor para obtener la lista de distritos correspondientes al
    //    municipio seleccionado.
    getDistritosFromMunicipioId();
})

// 7. var getMunicipiosFromDepartamentoId = function () { ... };
//    Declara una función JavaScript llamada 'getMunicipiosFromDepartamentoId'. Esta función
//    se encarga de realizar la llamada AJAX para obtener los municipios.
var getMunicipiosFromDepartamentoId = function () {
    // 8. $.ajax({ ... });
    //    Utiliza la función 'ajax' de la librería jQuery para realizar una petición HTTP asíncrona.
    $.ajax({
        // 9. url: '@Url.Action("GetMunicipiosFromDepartamentoId", "Zona")',
        //    Especifica la URL a la que se enviará la petición AJAX. Se utiliza la sintaxis de
        //    ASP.NET MVC ('Url.Action') para generar la URL de la acción del controlador llamada
        //    "GetMunicipiosFromDepartamentoId" dentro del controlador llamado "Zona". Esto asegura
        //    que la URL sea correcta incluso si la estructura de las rutas de la aplicación cambia.
        url: '@Url.Action("GetMunicipiosFromDepartamentoId", "Zona")',
        // 10. type: 'GET',
        //     Especifica el tipo de petición HTTP que se realizará, en este caso, una petición GET.
        type: 'GET',
        // 11. data: { departamentoId: $('#departamentoId').val(), },
        //     Especifica los datos que se enviarán al servidor con la petición GET. Se envían como
        //     un objeto JavaScript que jQuery convertirá en parámetros en la URL (query string).
        //     - departamentoId: $('#departamentoId').val(): Obtiene el valor seleccionado actualmente
        //       en el elemento del DOM con el ID 'departamentoId' y lo envía al servidor bajo el
        //       nombre del parámetro 'departamentoId'.
        data: {
            departamentoId: $('#departamentoId').val(),
        },
        // 12. success: function (data) { ... },
        //     Define una función que se ejecutará si la petición AJAX al servidor se completa
        //     con éxito (es decir, el servidor devuelve una respuesta con un código de estado HTTP
        //     que indica éxito, como 200 OK). El parámetro 'data' contendrá la respuesta del servidor,
        //     que se espera que sea un array de objetos representando los municipios.
        success: function (data) {
            // 13. $('#municipioId').find('option').remove();
            //     Selecciona el elemento del DOM con el ID 'municipioId' (el dropdown de municipios),
            //     busca todos sus elementos <option> y los elimina. Esto se hace para limpiar la lista
            //     de municipios antes de agregar los nuevos que corresponden al departamento seleccionado.
            $('#municipioId').find('option').remove()
            // 14. $('#municipioId').append('<option value="0">SELECCIONAR</option>');
            //     Agrega una nueva opción al dropdown de municipios con el valor "0" y el texto
            //     "SELECCIONAR". Esta suele ser una opción por defecto para indicar que aún no se ha
            //     seleccionado ningún municipio.
            $('#municipioId').append('<option value="0">SELECCIONAR</option>')
            // 15. $('#distritos').find('option').remove();
            //     Similar al paso 13, limpia la lista de opciones del dropdown de distritos (elemento
            //     con el ID 'distritos'). Esto se hace porque al cambiar el departamento, la lista de
            //     distritos ya no es válida hasta que se seleccione un nuevo municipio.
            $('#distritos').find('option').remove()
            // 16. $('#distritos').append('<option value="0">SELECCIONAR</option>');
            //     Agrega la opción por defecto "SELECCIONAR" al dropdown de distritos.
            $('#distritos').append('<option value="0">SELECCIONAR</option>')
            // 17. $(data).each(function (i, item) { ... });
            //     Itera sobre cada elemento del array 'data' recibido del servidor. Se espera que cada
            //     'item' sea un objeto JavaScript que represente un municipio y tenga propiedades como
            //     'id' y 'nombre'.
            $(data).each(
                function (i, item) {
                    // 18. $('#municipioId').append('<option value="'+ item.id +'">' + item.nombre + '</option>');
                    //     Por cada municipio en el array 'data', se crea un nuevo elemento <option> para
                    //     el dropdown de municipios. El valor de la opción se establece con la propiedad
                    //     'id' del municipio, y el texto visible de la opción se establece con la propiedad
                    //     'nombre' del municipio. Este nuevo <option> se agrega al final del dropdown
                    //     'municipioId'.
                    $('#municipioId').append('<option value="'+ item.id +'">' + item.nombre + '</option>')
                }
            )
        }
    })
}

// 19. var getDistritosFromMunicipioId = function () { ... };
//     Declara una función JavaScript llamada 'getDistritosFromMunicipioId'. Esta función se
//     encarga de realizar la llamada AJAX para obtener los distritos. Su estructura es muy similar
//     a 'getMunicipiosFromDepartamentoId'.
var getDistritosFromMunicipioId = function () {
    // 20. $.ajax({ ... });
    //     Utiliza la función 'ajax' de jQuery para realizar una petición HTTP asíncrona.
    $.ajax({
        // 21. url: '@Url.Action("GetDistritosFromMunicipioId", "Zona")',
        //     Especifica la URL para obtener los distritos, apuntando a la acción
        //     "GetDistritosFromMunicipioId" del controlador "Zona".
        url: '@Url.Action("GetDistritosFromMunicipioId", "Zona")',
        // 22. type: 'GET',
        //     Realiza una petición HTTP GET.
        type: 'GET',
        // 23. data: { municipioId: $('#municipioId').val(), },
        //     Envía el ID del municipio seleccionado (obtenido del elemento con ID 'municipioId')
        //     al servidor como parámetro 'municipioId'.
        data: {
            municipioId: $('#municipioId').val(),
        },
        // 24. success: function (data) { ... },
        //     Función que se ejecuta si la petición AJAX es exitosa. 'data' contiene la lista de
        //     distritos devuelta por el servidor.
        success: function (data) {
            // 25. $('#distritos').find('option').remove();
            //     Limpia la lista de opciones del dropdown de distritos.
            $('#distritos').find('option').remove()
            // 26. $('#distritos').append('<option value="0">SELECCIONAR</option>');
            //     Agrega la opción por defecto "SELECCIONAR" al dropdown de distritos.
            $('#distritos').append('<option value="0">SELECCIONAR</option>')
            // 27. $(data).each(function (i, item) { ... });
            //     Itera sobre la lista de distritos recibida del servidor.
            $(data).each(
                function (i, item) {
                    // 28. $('#distritos').append('<option value="'+ item.id +'">' + item.nombre + '</option>');
                    //     Por cada distrito, crea una nueva opción en el dropdown de distritos con el
                    //     ID del distrito como valor y el nombre del distrito como texto visible.
                    $('#distritos').append('<option value="'+ item.id +'">' + item.nombre + '</option>')
                }
            )
        }
    })
}
    </script>
}
